{"version":3,"file":"index.cjs","sources":["../src/utils/fileUtils.ts","../src/measurements/webVitals.ts","../src/scenarios/runner.ts","../src/guardian/budgetChecker.ts","../src/guardian/index.ts"],"sourcesContent":["import { readFileSync, readdirSync, statSync } from 'node:fs';\nimport { join } from 'node:path';\nimport type { ScenarioFile } from '../types';\n\n/**\n * Recursively finds all *.scenario.json files in a directory\n * @param directory - Directory path to scan\n * @returns Array of file paths\n */\nexport function findScenarioFiles(directory: string): string[] {\n  const scenarioFiles: string[] = [];\n  \n  function scanDirectory(dir: string): void {\n    try {\n      const items = readdirSync(dir);\n      \n      for (const item of items) {\n        const fullPath = join(dir, item);\n        const stat = statSync(fullPath);\n        \n        if (stat.isDirectory()) {\n          scanDirectory(fullPath);\n        } else if (stat.isFile() && item.endsWith('.scenario.json')) {\n          scenarioFiles.push(fullPath);\n        }\n      }\n    } catch (error) {\n      console.warn(`Warning: Could not scan directory ${dir}:`, error);\n    }\n  }\n  \n  scanDirectory(directory);\n  return scenarioFiles;\n}\n\n/**\n * Loads and validates a scenario file\n * @param filePath - Path to the scenario file\n * @returns Parsed and validated scenario file\n * @throws Error if file cannot be loaded or is invalid\n */\nexport function loadScenarioFile(filePath: string): ScenarioFile {\n  try {\n    const content = readFileSync(filePath, 'utf-8');\n    const scenario = JSON.parse(content) as ScenarioFile;\n    \n    // Validate required fields\n    if (!scenario.name) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'name'`);\n    }\n    if (!scenario.url) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'url'`);\n    }\n    if (!scenario.steps || !Array.isArray(scenario.steps)) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'steps'`);\n    }\n    \n    return scenario;\n  } catch (error) {\n    throw new Error(`Failed to load scenario file ${filePath}: ${error}`);\n  }\n}\n","import type { Page } from 'playwright';\nimport type { WebVitalsReport } from '../types';\n\n/**\n * Install Web Vitals collectors at the earliest script time.\n * Call BEFORE navigation to capture FCP/LCP from the initial load.\n */\nexport async function startVitalsObservation(\n  page: Page,\n  options?: { usePerformanceObserver?: boolean; fallbackToPackage?: boolean }\n): Promise<void> {\n  const useObserver = options?.usePerformanceObserver ?? true;\n  const allowPackage = options?.fallbackToPackage ?? false;\n\n  // For web-vitals package, we'll load it after navigation but before steps\n  if (!useObserver && allowPackage) {\n    // Just initialize the results object for now\n    const initScript = `\n      (function(){\n        if (window.__wvg && window.__wvg.started) return;\n        window.__wvg = { started: true, results: {}, packageLoaded: false };\n      })();\n    `;\n    await page.addInitScript({ content: initScript });\n    return;\n  }\n\n  if (!useObserver) return; // No observers requested\n\n  const initScript = `\n    (function(){\n      if (window.__wvg && window.__wvg.started) return;\n      window.__wvg = { started: true, results: {}, observers: [] };\n      try {\n        // FCP\n        try {\n          const fcpObs = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const fcp = entries.find(e => e.name === 'first-contentful-paint');\n            if (fcp) { window.__wvg.results.FCP = fcp.startTime; }\n          });\n          fcpObs.observe({ entryTypes: ['paint'] });\n          window.__wvg.observers.push(fcpObs);\n        } catch {}\n\n        // LCP\n        try {\n          const lcpObs = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const last = entries[entries.length - 1];\n            if (last) { window.__wvg.results.LCP = last.startTime; }\n          });\n          lcpObs.observe({ entryTypes: ['largest-contentful-paint'] });\n          window.__wvg.observers.push(lcpObs);\n        } catch {}\n\n        // CLS\n        try {\n          let cls = 0;\n          const clsObs = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!entry.hadRecentInput) { cls += (entry).value || 0; }\n            }\n            window.__wvg.results.CLS = cls;\n          });\n          clsObs.observe({ entryTypes: ['layout-shift'] });\n          window.__wvg.observers.push(clsObs);\n        } catch {}\n\n        // INP (simplified event delay aggregation)\n        try {\n          let maxDelay = 0;\n          const inpObs = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              const ps = (entry).processingStart;\n              const st = entry.startTime;\n              if (ps && st) { maxDelay = Math.max(maxDelay, ps - st); }\n            }\n            window.__wvg.results.INP = maxDelay;\n          });\n          inpObs.observe({ entryTypes: ['event'] });\n          window.__wvg.observers.push(inpObs);\n        } catch {}\n      } catch {}\n    })();\n  `;\n  await page.addInitScript({ content: initScript });\n}\n\n/**\n * Load web-vitals package and register metrics (for package approach)\n * Call AFTER navigation but BEFORE scenario steps\n */\nexport async function loadWebVitalsPackage(page: Page): Promise<void> {\n  try {\n    // Load the web-vitals package\n    await page.addScriptTag({\n      url: 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.iife.js'\n    });\n    \n    // Wait a moment for the script to load\n    await page.waitForTimeout(1000);\n    \n    // Register all metrics\n    await page.evaluate(() => {\n      if ((window as any)['webVitals'] && (window as any).__wvg) {\n        const wv = (window as any)['webVitals'];\n        (window as any).__wvg.packageLoaded = true;\n        \n        // Register all metrics\n        wv.onFCP((metric: any) => { \n          (window as any).__wvg.results.FCP = metric.value; \n          console.log('FCP measured (web-vitals package):', metric.value);\n        });\n        wv.onLCP((metric: any) => { \n          (window as any).__wvg.results.LCP = metric.value; \n          console.log('LCP measured (web-vitals package):', metric.value);\n        });\n        wv.onCLS((metric: any) => { \n          (window as any).__wvg.results.CLS = metric.value; \n          console.log('CLS measured (web-vitals package):', metric.value);\n        });\n        wv.onINP((metric: any) => { \n          (window as any).__wvg.results.INP = metric.value; \n          console.log('INP measured (web-vitals package):', metric.value);\n        });\n      }\n    });\n    \n    console.log('✅ Web-vitals package loaded and metrics registered');\n  } catch (error) {\n    console.warn('⚠️  Failed to load web-vitals package:', error);\n  }\n}\n\n/**\n * Disconnect observers and collect measured metrics.\n * Call AFTER scenario steps and a short settle delay.\n */\nexport async function collectVitals(page: Page): Promise<WebVitalsReport['metrics']> {\n  const results = await page.evaluate(() => {\n    const out: any = (window as any).__wvg?.results ? { ...(window as any).__wvg.results } : {};\n    \n    // Add TTFB from Navigation Timing API\n    try {\n      const nav = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      if (nav) {\n        out.TTFB = nav.responseStart - nav.requestStart;\n      }\n    } catch {}\n    \n    // Cleanup observers (for PerformanceObserver approach)\n    try {\n      if ((window as any).__wvg?.observers) {\n        for (const obs of (window as any).__wvg.observers) { \n          try { obs.disconnect(); } catch {} \n        }\n      }\n    } catch {}\n    \n    // Reset state\n    try {\n      if ((window as any).__wvg) {\n        (window as any).__wvg.started = false;\n      }\n    } catch {}\n    \n    return out;\n  });\n  return results as WebVitalsReport['metrics'];\n}\n\n/**\n * Measures Web Vitals metrics using PerformanceObserver (no external dependencies)\n * @param page - Playwright page instance\n * @returns Promise resolving to Web Vitals metrics\n */\nexport async function measureWebVitalsWithObserver(page: Page): Promise<WebVitalsReport['metrics']> {\n  const metrics: WebVitalsReport['metrics'] = {};\n  \n  try {\n    const results = await page.evaluate(() => {\n      return new Promise<WebVitalsReport['metrics']>((resolve) => {\n        const results: WebVitalsReport['metrics'] = {};\n        let resolved = false;\n        \n        // Timeout after 10 seconds to prevent hanging\n        const timeout = setTimeout(() => {\n          if (!resolved) {\n            resolved = true;\n            resolve(results);\n          }\n        }, 10000);\n        \n        // Helper function to resolve once\n        const resolveOnce = (value: WebVitalsReport['metrics']) => {\n          if (!resolved) {\n            resolved = true;\n            clearTimeout(timeout);\n            resolve(value);\n          }\n        };\n        \n        // Track metrics collected\n        let metricsCollected = 0;\n        const totalMetrics = 4; // FCP, LCP, CLS, INP\n        \n        const checkComplete = () => {\n          metricsCollected++;\n          if (metricsCollected >= totalMetrics && !resolved) {\n            resolveOnce(results);\n          }\n        };\n        \n        // 1. First Contentful Paint (FCP)\n        try {\n          const fcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');\n            if (fcpEntry) {\n              results.FCP = fcpEntry.startTime;\n              console.log('FCP measured (PerformanceObserver):', fcpEntry.startTime);\n              fcpObserver.disconnect();\n              checkComplete();\n            }\n          });\n          fcpObserver.observe({ entryTypes: ['paint'] });\n        } catch (e) {\n          console.warn('FCP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 2. Largest Contentful Paint (LCP)\n        try {\n          const lcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const lastEntry = entries[entries.length - 1];\n            if (lastEntry) {\n              results.LCP = lastEntry.startTime;\n              console.log('LCP measured (PerformanceObserver):', lastEntry.startTime);\n            }\n          });\n          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          \n          // LCP can change, so we wait a bit before finalizing\n          setTimeout(() => {\n            lcpObserver.disconnect();\n            checkComplete();\n          }, 2000);\n        } catch (e) {\n          console.warn('LCP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 3. Cumulative Layout Shift (CLS)\n        try {\n          let clsValue = 0;\n          const clsObserver = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!(entry as any).hadRecentInput) {\n                clsValue += (entry as any).value;\n              }\n            }\n            results.CLS = clsValue;\n            console.log('CLS measured (PerformanceObserver):', clsValue);\n          });\n          clsObserver.observe({ entryTypes: ['layout-shift'] });\n          \n          // CLS measurement continues until page unload, so we wait\n          setTimeout(() => {\n            clsObserver.disconnect();\n            checkComplete();\n          }, 3000);\n        } catch (e) {\n          console.warn('CLS PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 4. Interaction to Next Paint (INP) - simplified version\n        try {\n          let maxInteractionDelay = 0;\n          const inpObserver = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              const processingStart = (entry as any).processingStart;\n              const startTime = entry.startTime;\n              if (processingStart && startTime) {\n                const delay = processingStart - startTime;\n                maxInteractionDelay = Math.max(maxInteractionDelay, delay);\n              }\n            }\n            results.INP = maxInteractionDelay;\n            console.log('INP measured (PerformanceObserver):', maxInteractionDelay);\n          });\n          inpObserver.observe({ entryTypes: ['event'] });\n          \n          // Wait for interactions to settle\n          setTimeout(() => {\n            inpObserver.disconnect();\n            checkComplete();\n          }, 2000);\n        } catch (e) {\n          console.warn('INP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 5. Time to First Byte (TTFB) - using Navigation Timing\n        try {\n          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n          if (navigation) {\n            results.TTFB = navigation.responseStart - navigation.requestStart;\n            console.log('TTFB measured (PerformanceObserver):', results.TTFB);\n          }\n        } catch (e) {\n          console.warn('TTFB measurement failed:', e);\n          // TTFB is optional, don't fail if not available\n        }\n      });\n    });\n    \n    // Merge results\n    Object.assign(metrics, results);\n    \n  } catch (error) {\n    console.warn('Warning: Could not measure Web Vitals with PerformanceObserver:', error);\n  }\n  \n  return metrics;\n}\n\n/**\n * Measures Web Vitals metrics on a page with CSP-safe fallback\n * @param page - Playwright page instance\n * @param options - Configuration options for Web Vitals measurement\n * @returns Promise resolving to Web Vitals metrics\n */\nexport async function measureWebVitals(\n  page: Page, \n  options?: { usePerformanceObserver?: boolean; fallbackToPackage?: boolean }\n): Promise<WebVitalsReport['metrics']> {\n  const useObserver = options?.usePerformanceObserver ?? true; // Default to CSP-safe approach\n  const allowFallback = options?.fallbackToPackage ?? false;   // Default to no fallback\n  \n  // If forced to use PerformanceObserver, use it directly\n  if (useObserver && !allowFallback) {\n    console.log('🔍 Measuring Web Vitals with PerformanceObserver (CSP-safe, no fallback)...');\n    return measureWebVitalsWithObserver(page);\n  }\n  \n  // If forced to use web-vitals package, try it first\n  if (!useObserver && allowFallback) {\n    try {\n      console.log('📦 Measuring Web Vitals with web-vitals package...');\n      return measureWebVitalsWithPackage(page);\n    } catch (error) {\n      console.warn('⚠️  web-vitals package failed, falling back to PerformanceObserver');\n      return measureWebVitalsWithObserver(page);\n    }\n  }\n  \n  // Default behavior: Try PerformanceObserver first, then web-vitals package if allowed\n  try {\n    console.log('🔍 Measuring Web Vitals with PerformanceObserver (CSP-safe)...');\n    const observerResults = await measureWebVitalsWithObserver(page);\n    \n    // If we got at least some metrics, use them\n    const hasMetrics = Object.keys(observerResults).length > 0;\n    if (hasMetrics) {\n      console.log('✅ Successfully measured Web Vitals with PerformanceObserver');\n      return observerResults;\n    }\n  } catch (error) {\n    console.warn('PerformanceObserver failed, trying web-vitals package:', error);\n  }\n  \n  // Fallback to web-vitals package if allowed (may be blocked by CSP)\n  if (allowFallback) {\n    try {\n      console.log('📦 Attempting to load web-vitals package...');\n      return await measureWebVitalsWithPackage(page);\n    } catch (error) {\n      console.warn('⚠️  web-vitals package blocked by CSP, using PerformanceObserver fallback');\n      // Final fallback to PerformanceObserver\n      return await measureWebVitalsWithObserver(page);\n    }\n  }\n  \n  // If no fallback allowed and PerformanceObserver failed, return empty metrics\n  console.warn('⚠️  PerformanceObserver failed and fallback disabled, returning empty metrics');\n  return {};\n}\n\n/**\n * Original web-vitals package implementation (for fallback)\n */\nasync function measureWebVitalsWithPackage(page: Page): Promise<WebVitalsReport['metrics']> {\n  const metrics: WebVitalsReport['metrics'] = {};\n  \n  try {\n    // Inject Web Vitals measurement script\n    await page.addScriptTag({\n      url: 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.iife.js'\n    });\n    \n    // Wait a moment for the script to load\n    await page.waitForTimeout(1000);\n    \n    // Measure all Web Vitals metrics together with proper timing\n    const allMetrics = await page.evaluate(() => {\n      return new Promise<WebVitalsReport['metrics']>((resolve) => {\n        const results: WebVitalsReport['metrics'] = {};\n        let metricsCollected = 0;\n        const totalMetrics = 4; // FCP, LCP, CLS, INP\n        \n        // Timeout after 15 seconds\n        const timeout = setTimeout(() => {\n          resolve(results);\n        }, 15000);\n        \n        const checkComplete = () => {\n          metricsCollected++;\n          if (metricsCollected >= totalMetrics) {\n            clearTimeout(timeout);\n            resolve(results);\n          }\n        };\n        \n        // Check if web-vitals is available\n        if (!('webVitals' in window)) {\n          console.warn('webVitals library not loaded');\n          clearTimeout(timeout);\n          resolve(results);\n          return;\n        }\n        \n        const webVitals = (window as any)['webVitals'];\n        \n        // Measure FCP (First Contentful Paint)\n        try {\n          webVitals.onFCP((metric: any) => {\n            results.FCP = metric.value;\n            console.log('FCP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('FCP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure LCP (Largest Contentful Paint)\n        try {\n          webVitals.onLCP((metric: any) => {\n            results.LCP = metric.value;\n            console.log('LCP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('LCP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure CLS (Cumulative Layout Shift)\n        try {\n          webVitals.onCLS((metric: any) => {\n            results.CLS = metric.value;\n            console.log('CLS measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('CLS measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure INP (Interaction to Next Paint)\n        try {\n          webVitals.onINP((metric: any) => {\n            results.INP = metric.value;\n            console.log('INP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('INP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure TTFB (Time to First Byte) using Performance API\n        try {\n          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n          if (navigation) {\n            results.TTFB = navigation.responseStart - navigation.requestStart;\n            console.log('TTFB measured:', results.TTFB);\n          }\n        } catch (e) {\n          console.warn('TTFB measurement failed:', e);\n        }\n      });\n    });\n    \n    // Merge results\n    Object.assign(metrics, allMetrics);\n    \n    console.log('✅ Successfully measured Web Vitals with web-vitals package:', metrics);\n    \n  } catch (error) {\n    console.warn('Warning: Could not measure some Web Vitals with package:', error);\n    throw error; // Re-throw to trigger fallback\n  }\n  \n  return metrics;\n}\n\n/**\n * Measures additional performance metrics using the Performance API\n * @param page - Playwright page instance\n * @returns Promise resolving to performance metrics\n */\nexport async function measurePerformanceMetrics(page: Page): Promise<WebVitalsReport['performance']> {\n  const performanceMetrics = await page.evaluate((): WebVitalsReport['performance'] => {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint') as PerformanceEntry[];\n    \n    return {\n      loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n      firstPaint: paint.find((entry: PerformanceEntry) => entry.name === 'first-paint')?.startTime || 0\n    };\n  });\n  \n  return performanceMetrics;\n}\n","import type { Browser, Page } from 'playwright';\nimport type { ScenarioStep, ScenarioFile, WebVitalsReport, GuardianConfig } from '../types';\nimport { measureWebVitals, measurePerformanceMetrics, startVitalsObservation, collectVitals, loadWebVitalsPackage } from '../measurements/webVitals';\n\n/**\n * Executes a single scenario step\n * @param page - Playwright page instance\n * @param step - Scenario step to execute\n * @throws Error if step execution fails\n */\nexport async function executeScenarioStep(page: Page, step: ScenarioStep): Promise<void> {\n  const timeout = step.timeout || 30000;\n  \n  switch (step.type) {\n    case 'navigate':\n      if (!step.url) {\n        throw new Error('Navigate step requires a URL');\n      }\n      await page.goto(step.url, { waitUntil: 'networkidle', timeout });\n      break;\n      \n    case 'click':\n      if (!step.selector) {\n        throw new Error('Click step requires a selector');\n      }\n      await page.click(step.selector, { timeout });\n      break;\n      \n    case 'type':\n      if (!step.selector || !step.text) {\n        throw new Error('Type step requires a selector and text');\n      }\n      await page.fill(step.selector, step.text, { timeout });\n      break;\n      \n    case 'wait':\n      if (step.waitFor) {\n        await page.waitForSelector(step.waitFor, { timeout });\n      } else {\n        await page.waitForTimeout(step.timeout || 1000);\n      }\n      break;\n      \n    case 'scroll':\n      await page.evaluate(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      });\n      break;\n      \n    case 'hover':\n      if (!step.selector) {\n        throw new Error('Hover step requires a selector');\n      }\n      await page.hover(step.selector, { timeout });\n      break;\n      \n    default:\n      throw new Error(`Unknown step type: ${step.type}`);\n  }\n}\n\n/**\n * Runs a complete scenario and measures Web Vitals\n * @param browser - Playwright browser instance\n * @param scenario - Scenario configuration\n * @param config - Guardian configuration (for Web Vitals options)\n * @returns Promise resolving to Web Vitals report\n */\nexport async function runScenario(browser: Browser, scenario: ScenarioFile, config?: GuardianConfig): Promise<WebVitalsReport> {\n  \n  const context = await browser.newContext({bypassCSP: true});\n  const page = await context.newPage();\n  \n  try {\n    // Navigate to the initial URL\n    \n    \n    // Start Web Vitals observation BEFORE navigation\n    await startVitalsObservation(page, config?.webVitals);\n    \n    // Navigate to the initial URL\n    await page.goto(scenario.url, { waitUntil: 'networkidle' });\n    \n    // Load web-vitals package if needed (after navigation, before steps)\n    if (config?.webVitals?.fallbackToPackage && !config?.webVitals?.usePerformanceObserver) {\n      await loadWebVitalsPackage(page);\n    }\n    \n    // Execute all scenario steps\n    for (const step of scenario.steps) {\n      await executeScenarioStep(page, step);\n    }\n    \n    // Wait a bit for any final interactions to settle\n    await page.waitForTimeout(2000);\n    const webVitals = await collectVitals(page);\n    \n    \n    // const webVitals = await webVitalsPromise;\n    const performance = await measurePerformanceMetrics(page);\n\n    // Generate report\n    const report: WebVitalsReport = {\n      scenario: scenario.name,\n      url: scenario.url,\n      timestamp: new Date().toISOString(),\n      metrics: webVitals,\n      performance\n    };\n    \n    return report;\n    \n  } finally {\n    await page.close();\n  }\n}\n","import type { WebVitalsReport, GuardianConfig } from '../types';\n\n/**\n * Checks if Web Vitals metrics violate performance budgets\n * @param report - Web Vitals report to check\n * @param budgets - Performance budgets to validate against\n * @returns Array of budget violation messages\n */\nexport function checkBudgetViolations(report: WebVitalsReport, budgets: GuardianConfig['budgets']): string[] {\n  const violations: string[] = [];\n  \n  if (!budgets) return violations;\n  \n  const { metrics } = report;\n  \n  if (budgets.FCP && metrics.FCP && metrics.FCP > budgets.FCP) {\n    violations.push(`FCP: ${metrics.FCP}ms > ${budgets.FCP}ms`);\n  }\n  \n  if (budgets.LCP && metrics.LCP && metrics.LCP > budgets.LCP) {\n    violations.push(`LCP: ${metrics.LCP}ms > ${budgets.LCP}ms`);\n  }\n  \n  if (budgets.FID && metrics.FID && metrics.FID > budgets.FID) {\n    violations.push(`FID: ${metrics.FID}ms > ${budgets.FID}ms`);\n  }\n  \n  if (budgets.CLS && metrics.CLS && metrics.CLS > budgets.CLS) {\n    violations.push(`CLS: ${metrics.CLS} > ${budgets.CLS}`);\n  }\n  \n  if (budgets.INP && metrics.INP && metrics.INP > budgets.INP) {\n    violations.push(`INP: ${metrics.INP}ms > ${budgets.INP}ms`);\n  }\n  \n  if (budgets.TTFB && metrics.TTFB && metrics.TTFB > budgets.TTFB) {\n    violations.push(`TTFB: ${metrics.TTFB}ms > ${budgets.TTFB}ms`);\n  }\n  \n  return violations;\n}\n","import { chromium } from 'playwright';\nimport type { GuardianConfig, GuardianResult } from '../types';\nimport { findScenarioFiles, loadScenarioFile } from '../utils/fileUtils';\nimport { runScenario } from '../scenarios/runner';\nimport { checkBudgetViolations } from './budgetChecker';\n\n/**\n * Main function that runs all scenarios and generates Web Vitals reports\n * @param config - Guardian configuration\n * @returns Promise resolving to execution results and summary\n */\nexport async function runWebVitalsGuardian(config: GuardianConfig): Promise<GuardianResult> {\n  const browser = await chromium.launch({ \n    headless: config.headless !== false \n  });\n  \n  try {\n    // Find all scenario files\n    const scenarioFiles = findScenarioFiles(config.scenariosPath);\n    \n    if (scenarioFiles.length === 0) {\n      throw new Error(`No *.scenario.json files found in ${config.scenariosPath}`);\n    }\n    \n    console.log(`Found ${scenarioFiles.length} scenario files`);\n    \n    const reports: GuardianResult['reports'] = [];\n    const budgetViolations: string[] = [];\n    \n    // Run each scenario\n    for (const filePath of scenarioFiles) {\n      try {\n        console.log(`Running scenario: ${filePath}`);\n        const scenario = loadScenarioFile(filePath);\n        const report = await runScenario(browser, scenario, config);\n        reports.push(report);\n        \n        // Check against budgets\n        const budgets = { ...config.budgets, ...scenario.webVitals?.budgets };\n        const violations = checkBudgetViolations(report, budgets);\n        if (violations.length > 0) {\n          budgetViolations.push(`${scenario.name}: ${violations.join(', ')}`);\n        }\n        \n        console.log(`✓ Completed: ${scenario.name}`);\n      } catch (error) {\n        console.error(`✗ Failed to run scenario ${filePath}:`, error);\n        // Continue with other scenarios\n      }\n    }\n    \n    const summary: GuardianResult['summary'] = {\n      totalScenarios: scenarioFiles.length,\n      passed: reports.length,\n      failed: scenarioFiles.length - reports.length,\n      budgetViolations\n    };\n    \n    return { reports, summary };\n    \n  } finally {\n    await browser.close();\n  }\n}\n"],"names":["readdirSync","join","statSync","readFileSync","initScript","results","performance","chromium"],"mappings":"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"}