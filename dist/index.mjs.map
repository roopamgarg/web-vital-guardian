{"version":3,"file":"index.mjs","sources":["../src/utils/variableUtils.ts","../src/utils/fileUtils.ts","../src/utils/profileAnalyzer.ts","../src/utils/reportGenerator.ts","../src/measurements/webVitals.ts","../src/measurements/performanceObserver.ts","../src/scenarios/runner.ts","../src/guardian/budgetChecker.ts","../src/guardian/index.ts"],"sourcesContent":["import type { ScenarioFile, ScenarioStep } from '../types';\n\n/**\n * Interpolates variables in a string using ${variableName} syntax\n * @param text - Text containing variable references\n * @param variables - Object containing variable values\n * @returns Interpolated string\n */\nexport function interpolateVariables(text: string, variables: Record<string, string | number | boolean>): string {\n  if (!text || typeof text !== 'string') {\n    return text;\n  }\n\n  return text.replace(/\\$\\{([^}]+)\\}/g, (match, variableName) => {\n    const trimmedName = variableName.trim();\n    if (variables.hasOwnProperty(trimmedName)) {\n      return String(variables[trimmedName]);\n    }\n    // Return the original match if variable not found (could also throw error)\n    console.warn(`Variable '${trimmedName}' not found in variables`);\n    return match;\n  });\n}\n\n/**\n * Recursively interpolates variables in an object\n * @param obj - Object to interpolate variables in\n * @param variables - Object containing variable values\n * @returns Object with interpolated values\n */\nexport function interpolateObject(obj: any, variables: Record<string, string | number | boolean>): any {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (typeof obj === 'string') {\n    return interpolateVariables(obj, variables);\n  }\n\n  if (typeof obj === 'number' || typeof obj === 'boolean') {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => interpolateObject(item, variables));\n  }\n\n  if (typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = interpolateObject(value, variables);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\n/**\n * Interpolates variables in a scenario file\n * @param scenario - Scenario file to interpolate\n * @param variables - Global variables to use for interpolation\n * @returns Scenario file with interpolated values\n */\nexport function interpolateScenario(scenario: ScenarioFile, variables: Record<string, string | number | boolean>): ScenarioFile {\n  return interpolateObject(scenario, variables) as ScenarioFile;\n}\n\n/**\n * Merges global and scenario-specific variables\n * Scenario-specific variables take precedence over global ones\n * @param globalVariables - Global variables from config\n * @param scenarioVariables - Scenario-specific variables\n * @returns Merged variables object\n */\nexport function mergeVariables(\n  globalVariables: Record<string, string | number | boolean> = {},\n  scenarioVariables: Record<string, string | number | boolean> = {}\n): Record<string, string | number | boolean> {\n  return {\n    ...globalVariables,\n    ...scenarioVariables\n  };\n}\n","import { readFileSync, readdirSync, statSync } from 'node:fs';\nimport { join, dirname } from 'node:path';\nimport type { ScenarioFile } from '../types';\nimport { interpolateScenario, mergeVariables } from './variableUtils';\n\n/**\n * Recursively finds all *.scenario.json and *.scenario.js files in a directory\n * @param directory - Directory path to scan\n * @returns Array of file paths\n */\nexport function findScenarioFiles(directory: string): string[] {\n  const scenarioFiles: string[] = [];\n  \n  function scanDirectory(dir: string): void {\n    try {\n      const items = readdirSync(dir);\n      \n      for (const item of items) {\n        const fullPath = join(dir, item);\n        const stat = statSync(fullPath);\n        \n        if (stat.isDirectory()) {\n          scanDirectory(fullPath);\n        } else if (stat.isFile() && (item.endsWith('.scenario.json') || item.endsWith('.scenario.js'))) {\n          scenarioFiles.push(fullPath);\n        }\n      }\n    } catch (error) {\n      console.warn(`Warning: Could not scan directory ${dir}:`, error);\n    }\n  }\n  \n  scanDirectory(directory);\n  return scenarioFiles;\n}\n\n/**\n * Loads and validates a scenario file (JSON or JavaScript)\n * @param filePath - Path to the scenario file\n * @param globalVariables - Global variables to use for interpolation\n * @returns Parsed and validated scenario file with interpolated variables\n * @throws Error if file cannot be loaded or is invalid\n */\nexport function loadScenarioFile(filePath: string, globalVariables: Record<string, string | number | boolean> = {}): ScenarioFile {\n  try {\n    const content = readFileSync(filePath, 'utf-8');\n    let scenario: ScenarioFile;\n    \n    if (filePath.endsWith('.scenario.js')) {\n      // For JavaScript files, we need to evaluate the module\n      // Create a simple module context\n      const moduleExports: any = {};\n      const moduleRequire = (id: string) => {\n        // Simple require implementation for basic scenarios\n        throw new Error(`require('${id}') is not supported in scenario files. Use only built-in JavaScript features.`);\n      };\n      \n      // Create module object\n      const moduleObj = {\n        exports: moduleExports,\n        require: moduleRequire,\n        filename: filePath,\n        dirname: dirname(filePath)\n      };\n      \n      // Evaluate the JavaScript content in a safe context\n      // We need to handle both module.exports = ... and exports.default = ... patterns\n      const scenarioFunction = new Function('exports', 'require', 'module', '__filename', '__dirname', content);\n      scenarioFunction(moduleExports, moduleRequire, moduleObj, filePath, dirname(filePath));\n      \n      // Get the scenario from module.exports (which gets assigned by module.exports = ...)\n      scenario = moduleObj.exports.default || moduleObj.exports;\n      \n    } else {\n      // For JSON files, parse as usual\n      scenario = JSON.parse(content) as ScenarioFile;\n    }\n    \n    // Validate required fields\n    if (!scenario.name) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'name'`);\n    }\n    if (!scenario.url) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'url'`);\n    }\n    if (!scenario.steps || !Array.isArray(scenario.steps)) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'steps'`);\n    }\n    \n    // Merge global and scenario-specific variables\n    const mergedVariables = mergeVariables(globalVariables, scenario.variables || {});\n    \n    // Interpolate variables in the scenario\n    const interpolatedScenario = interpolateScenario(scenario, mergedVariables);\n    \n    return interpolatedScenario;\n  } catch (error) {\n    throw new Error(`Failed to load scenario file ${filePath}: ${error}`);\n  }\n}\n","/**\n * Utility functions for analyzing enhanced profile data with source map information\n */\n\nexport interface EnhancedProfileNode {\n  callFrame: {\n    functionName: string;\n    originalFunctionName?: string;\n    originalSource?: string;\n    originalLine?: number;\n    originalColumn?: number;\n    url: string;\n  };\n  hitCount?: number;\n  children?: number[];\n}\n\nexport interface EnhancedProfile {\n  nodes: EnhancedProfileNode[];\n  samples: any[];\n  startTime: number;\n  endTime: number;\n}\n\n/**\n * Analyzes profile data and returns function performance statistics\n */\nexport function analyzeProfile(profile: EnhancedProfile) {\n  const functionStats = new Map<string, {\n    originalFunctionName: string;\n    originalSource: string;\n    originalLine: number;\n    totalTime: number;\n    hitCount: number;\n    samples: number;\n  }>();\n\n  // Analyze nodes\n  profile.nodes.forEach((node, index) => {\n    const callFrame = node.callFrame;\n    const functionName = callFrame.originalFunctionName || callFrame.functionName;\n    const source = callFrame.originalSource || callFrame.url;\n    const line = callFrame.originalLine || 0;\n    \n    if (!functionStats.has(functionName)) {\n      functionStats.set(functionName, {\n        originalFunctionName: functionName,\n        originalSource: source,\n        originalLine: line,\n        totalTime: 0,\n        hitCount: 0,\n        samples: 0\n      });\n    }\n    \n    const stats = functionStats.get(functionName)!;\n    stats.hitCount += node.hitCount || 0;\n  });\n\n  // Analyze samples\n  profile.samples.forEach(sample => {\n    if (sample.stackId !== undefined && profile.nodes[sample.stackId]) {\n      const node = profile.nodes[sample.stackId];\n      const functionName = node.callFrame.originalFunctionName || node.callFrame.functionName;\n      \n      if (functionStats.has(functionName)) {\n        functionStats.get(functionName)!.samples++;\n      }\n    }\n  });\n\n  return Array.from(functionStats.values())\n    .sort((a, b) => b.samples - a.samples);\n}\n\n/**\n * Gets the top N most expensive functions\n */\nexport function getTopExpensiveFunctions(profile: EnhancedProfile, limit: number = 10) {\n  const analysis = analyzeProfile(profile);\n  return analysis.slice(0, limit);\n}\n\n/**\n * Filters functions by source file\n */\nexport function getFunctionsBySource(profile: EnhancedProfile, sourcePattern: string) {\n  const analysis = analyzeProfile(profile);\n  return analysis.filter(func => \n    func.originalSource.includes(sourcePattern)\n  );\n}\n\n/**\n * Formats profile analysis for console output\n */\nexport function formatProfileAnalysis(profile: EnhancedProfile) {\n  const topFunctions = getTopExpensiveFunctions(profile, 10);\n  \n  console.log('\\n📊 Profile Analysis - Top 10 Most Expensive Functions:');\n  console.log('=' .repeat(80));\n  \n  topFunctions.forEach((func, index) => {\n    console.log(`${index + 1}. ${func.originalFunctionName}`);\n    console.log(`   Source: ${func.originalSource}:${func.originalLine}`);\n    console.log(`   Samples: ${func.samples}, Hits: ${func.hitCount}`);\n    console.log('');\n  });\n  \n  return topFunctions;\n}\n\n/**\n * Exports profile data in a readable format\n */\nexport function exportProfileData(profile: EnhancedProfile, format: 'json' | 'csv' = 'json') {\n  const analysis = analyzeProfile(profile);\n  \n  if (format === 'csv') {\n    const headers = 'Function Name,Source File,Line,Samples,Hit Count';\n    const rows = analysis.map(func => \n      `\"${func.originalFunctionName}\",\"${func.originalSource}\",${func.originalLine},${func.samples},${func.hitCount}`\n    );\n    return [headers, ...rows].join('\\n');\n  }\n  \n  return JSON.stringify(analysis, null, 2);\n}\n","import type { WebVitalsReport, GuardianResult } from '../types';\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * Generates an elegant HTML report for Web Vitals Guardian results\n * @param result - Guardian execution result\n * @param outputPath - Path to save the HTML report\n */\nexport function generateHTMLReport(result: GuardianResult, outputPath: string): void {\n  const html = createHTMLReport(result);\n  \n  // Ensure output directory exists\n  const outputDir = path.dirname(outputPath);\n  if (!fs.existsSync(outputDir)) {\n    fs.mkdirSync(outputDir, { recursive: true });\n  }\n  \n  fs.writeFileSync(outputPath, html);\n  console.log(`📊 HTML report generated: ${outputPath}`);\n}\n\n/**\n * Creates the complete HTML report content\n */\n  function createHTMLReport(result: GuardianResult): string {\n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Performance Analysis Dashboard</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"https://unpkg.com/tabulator-tables@5.5.2/dist/js/tabulator.min.js\"></script>\n    <link href=\"https://unpkg.com/tabulator-tables@5.5.2/dist/css/tabulator.min.css\" rel=\"stylesheet\">\n    <style>\n        ${getCSS()}\n    </style>\n</head>\n<body>\n    <div class=\"dashboard\">\n        <!-- Header -->\n        <header class=\"dashboard-header\">\n            <div class=\"header-content\">\n                <h1>Performance Analysis Dashboard</h1>\n                <p>Monitor Core Web Vitals, network performance, and JavaScript profiling across different user flows</p>\n            </div>\n            <div class=\"header-score\">\n                <div class=\"score-value\">${calculateOverallScore(result.reports)}</div>\n                <div class=\"score-label\">${getScoreLabel(calculateOverallScore(result.reports))}</div>\n            </div>\n        </header>\n\n        <!-- Navigation Tabs -->\n        <nav class=\"nav-tabs\">\n            <button class=\"nav-tab active\" data-tab=\"overview\">Overall</button>\n            ${result.reports.map((report, index) => `\n                <button class=\"nav-tab\" data-tab=\"scenario-${index}\">${report.scenario}</button>\n            `).join('')}\n        </nav>\n\n        <!-- Main Content -->\n        <main class=\"dashboard-content\">\n            <!-- Overview Tab -->\n            <div class=\"tab-content active\" id=\"overview\">\n                ${createOverviewContent(result.reports)}\n            </div>\n\n            <!-- Individual Scenario Tabs -->\n            ${result.reports.map((report, index) => `\n                <div class=\"tab-content\" id=\"scenario-${index}\">\n                    ${createScenarioContent(report, index)}\n                </div>\n            `).join('')}\n        </main>\n    </div>\n\n    <script>\n        // Embed data for JavaScript access\n        window.dashboardData = ${JSON.stringify(result.reports, null, 2)};\n        ${getJavaScript()}\n    </script>\n</body>\n</html>`;\n}\n\n/**\n * Creates CSS styles for the professional dashboard\n */\nfunction getCSS(): string {\n    return `\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n        background: #f8fafc;\n        color: #1f2937;\n        line-height: 1.6;\n    }\n\n    .dashboard {\n        min-height: 100vh;\n        background: #f8fafc;\n    }\n\n    /* Header */\n    .dashboard-header {\n        background: white;\n        padding: 2rem;\n        border-bottom: 1px solid #e5e7eb;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .header-content h1 {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #1f2937;\n        margin-bottom: 0.5rem;\n    }\n\n    .header-content p {\n        color: #6b7280;\n        font-size: 1rem;\n    }\n\n    .header-score {\n        text-align: right;\n    }\n\n    .score-value {\n        font-size: 2.5rem;\n        font-weight: 700;\n        color: #1f2937;\n    }\n\n    .score-label {\n        font-size: 0.875rem;\n        color: #6b7280;\n        font-weight: 500;\n    }\n\n    /* Navigation Tabs */\n    .nav-tabs {\n        background: white;\n        border-bottom: 1px solid #e5e7eb;\n        padding: 0 2rem;\n        display: flex;\n        gap: 0;\n    }\n\n    .nav-tab {\n        padding: 1rem 1.5rem;\n        border: none;\n        background: none;\n        cursor: pointer;\n        font-size: 0.875rem;\n        font-weight: 500;\n        color: #6b7280;\n        border-bottom: 2px solid transparent;\n        transition: all 0.2s ease;\n        position: relative;\n    }\n\n    .nav-tab:hover {\n        color: #374151;\n        background: #f9fafb;\n    }\n\n    .nav-tab.active {\n        color: #1f2937;\n        border-bottom-color: #3b82f6;\n        background: #f9fafb;\n    }\n\n    /* Main Content */\n    .dashboard-content {\n        padding: 2rem;\n        max-width: 1400px;\n        margin: 0 auto;\n    }\n\n    .tab-content {\n        display: none;\n    }\n\n    .tab-content.active {\n        display: block;\n    }\n\n    /* Performance Scores Section */\n    .performance-scores {\n        margin-bottom: 2rem;\n    }\n\n    .section-title {\n        font-size: 1.25rem;\n        font-weight: 600;\n        color: #1f2937;\n        margin-bottom: 1rem;\n    }\n\n    .scores-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: 1rem;\n    }\n\n    .score-card {\n        background: white;\n        border-radius: 8px;\n        padding: 1.5rem;\n        border: 1px solid #e5e7eb;\n        text-align: center;\n    }\n\n    .score-card.excellent {\n        border-left: 4px solid #10b981;\n    }\n\n    .score-card.good {\n        border-left: 4px solid #f59e0b;\n    }\n\n    .score-card.needs-improvement {\n        border-left: 4px solid #ef4444;\n    }\n\n    .score-card-value {\n        font-size: 2rem;\n        font-weight: 700;\n        margin-bottom: 0.25rem;\n    }\n\n    .score-card-label {\n        font-size: 0.875rem;\n        color: #6b7280;\n        font-weight: 500;\n    }\n\n    .score-card-status {\n        font-size: 0.75rem;\n        font-weight: 600;\n        margin-top: 0.5rem;\n        padding: 0.25rem 0.5rem;\n        border-radius: 4px;\n        display: inline-block;\n    }\n\n    .score-card-status.excellent {\n        background: #dcfce7;\n        color: #166534;\n    }\n\n    .score-card-status.good {\n        background: #fef3c7;\n        color: #92400e;\n    }\n\n    .score-card-status.needs-improvement {\n        background: #fecaca;\n        color: #dc2626;\n    }\n\n    /* Core Web Vitals Section */\n    .core-web-vitals {\n        margin-bottom: 2rem;\n    }\n\n    .vitals-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: 1rem;\n    }\n\n    .vital-card {\n        background: white;\n        border-radius: 8px;\n        padding: 1.5rem;\n        border: 1px solid #e5e7eb;\n        position: relative;\n    }\n\n    .vital-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 1rem;\n    }\n\n    .vital-name {\n        font-size: 0.875rem;\n        font-weight: 600;\n        color: #1f2937;\n    }\n\n    .vital-status {\n        font-size: 0.75rem;\n        font-weight: 600;\n        padding: 0.25rem 0.5rem;\n        border-radius: 4px;\n        background: #dcfce7;\n        color: #166534;\n    }\n\n    .vital-value {\n        font-size: 1.5rem;\n        font-weight: 700;\n        color: #1f2937;\n        margin-bottom: 0.5rem;\n    }\n\n    .vital-description {\n        font-size: 0.75rem;\n        color: #6b7280;\n        margin-bottom: 1rem;\n    }\n\n    .vital-chart {\n        height: 60px;\n        background: #f3f4f6;\n        border-radius: 4px;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .vital-chart-line {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 2px;\n        background: #3b82f6;\n        border-radius: 1px;\n    }\n\n    /* Content Grid */\n    .content-grid {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n    }\n\n    /* Network Analysis Section */\n    .network-analysis {\n        background: white;\n        border-radius: 8px;\n        border: 1px solid #e5e7eb;\n        overflow: hidden;\n    }\n\n    .section-header {\n        padding: 1.5rem;\n        border-bottom: 1px solid #e5e7eb;\n        background: #f9fafb;\n    }\n\n    .section-header h3 {\n        font-size: 1.125rem;\n        font-weight: 600;\n        color: #1f2937;\n        margin-bottom: 0.5rem;\n    }\n\n    .section-summary {\n        display: flex;\n        gap: 1rem;\n        font-size: 0.875rem;\n        color: #6b7280;\n    }\n\n    .network-content {\n        padding: 1.5rem;\n        overflow: auto;\n    }\n\n    .network-table {\n        width: 100%;\n        border-collapse: collapse;\n        font-size: 0.875rem;\n        background: white;\n        border-radius: 8px;\n        overflow: hidden;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n    }\n\n    .network-table th,\n    .network-table td {\n        padding: 0.75rem;\n        text-align: left;\n        border-bottom: 1px solid #e5e7eb;\n    }\n\n    .network-table th {\n        background: #f9fafb;\n        font-weight: 600;\n        color: #374151;\n        font-size: 0.75rem;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n    }\n\n    .network-table tr {\n        cursor: pointer;\n        transition: background-color 0.2s ease;\n    }\n\n    .network-table tr:hover {\n        background: #f8fafc;\n    }\n\n    .network-table tr.expanded {\n        background: #f1f5f9;\n    }\n\n    .network-table tr.expanded:hover {\n        background: #e2e8f0;\n    }\n\n    .expandable-row {\n        display: none;\n    }\n\n    .expandable-row.active {\n        display: table-row;\n    }\n\n    .expandable-content {\n        padding: 1rem;\n        background: #f8fafc;\n        border-top: 1px solid #e2e8f0;\n    }\n\n    .network-details {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: 1rem;\n        margin-bottom: 1rem;\n    }\n\n    .detail-group {\n        background: white;\n        padding: 0.75rem;\n        border-radius: 6px;\n        border: 1px solid #e2e8f0;\n    }\n\n    .detail-label {\n        font-size: 0.75rem;\n        font-weight: 600;\n        color: #6b7280;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n        margin-bottom: 0.25rem;\n    }\n\n    .detail-value {\n        font-size: 0.875rem;\n        color: #1f2937;\n        word-break: break-all;\n    }\n\n    .timing-breakdown {\n        margin-top: 1rem;\n    }\n\n    .timing-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem 0;\n        border-bottom: 1px solid #e2e8f0;\n    }\n\n    .timing-item:last-child {\n        border-bottom: none;\n    }\n\n    .timing-label {\n        font-size: 0.875rem;\n        color: #6b7280;\n    }\n\n    .timing-value {\n        font-size: 0.875rem;\n        font-weight: 600;\n        color: #1f2937;\n    }\n    \n    .timing-unavailable {\n        background: #f9fafb;\n        border-color: #e5e7eb;\n    }\n    \n    .timing-unavailable .timing-value {\n        color: #6b7280;\n    }\n    \n    .timing-note {\n        font-size: 0.75rem;\n        color: #6b7280;\n        margin-top: 0.25rem;\n        font-style: italic;\n    }\n    \n    .cache-notice, .connection-notice {\n        background: #f0f9ff;\n        border: 1px solid #3b82f6;\n        border-radius: 6px;\n        padding: 0.75rem;\n        margin-top: 1rem;\n        font-size: 0.875rem;\n        color: #1e40af;\n    }\n    \n    .connection-notice {\n        background: #f0fdf4;\n        border-color: #22c55e;\n        color: #15803d;\n    }\n    \n    .timing-discrepancy-notice {\n        background: #fef3c7;\n        border: 1px solid #f59e0b;\n        border-radius: 6px;\n        padding: 0.75rem;\n        margin-top: 1rem;\n        font-size: 0.875rem;\n        color: #92400e;\n        line-height: 1.4;\n    }\n    \n    .headers-section, .security-section {\n        margin-top: 1.5rem;\n    }\n    \n    .headers-section h4, .security-section h4 {\n        color: #374151;\n        font-size: 1rem;\n        font-weight: 600;\n        margin-bottom: 1rem;\n    }\n    \n    .headers-grid, .security-grid {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 1rem;\n    }\n    \n    .headers-card, .security-card {\n        background: #f8fafc;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        padding: 1rem;\n    }\n    \n    .headers-card h5 {\n        color: #374151;\n        font-size: 0.875rem;\n        font-weight: 600;\n        margin-bottom: 0.75rem;\n    }\n    \n    .headers-list {\n        max-height: 200px;\n        overflow-y: auto;\n    }\n    \n    .header-item {\n        display: flex;\n        margin-bottom: 0.5rem;\n        font-size: 0.75rem;\n    }\n    \n    .header-key {\n        color: #6b7280;\n        font-weight: 500;\n        min-width: 120px;\n        margin-right: 0.5rem;\n    }\n    \n    .header-value {\n        color: #1f2937;\n        word-break: break-all;\n    }\n    \n    .security-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: 0.75rem;\n    }\n    \n    .security-label {\n        font-size: 0.75rem;\n        color: #6b7280;\n        font-weight: 500;\n    }\n    \n    .security-value {\n        font-size: 0.875rem;\n        color: #1f2937;\n        font-weight: 600;\n        margin-top: 0.25rem;\n        word-break: break-all;\n    }\n\n    .expand-icon {\n        display: inline-block;\n        width: 16px;\n        height: 16px;\n        margin-right: 0.5rem;\n        transition: transform 0.2s ease;\n    }\n\n    .expand-icon.expanded {\n        transform: rotate(90deg);\n    }\n\n    /* Network Details Modal */\n    .network-details-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 1000;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .modal-backdrop {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        backdrop-filter: blur(4px);\n    }\n\n    .modal-content {\n        background: white;\n        border-radius: 12px;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        position: relative;\n        z-index: 1001;\n        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);\n    }\n\n    .modal-header {\n        padding: 1.5rem;\n        border-bottom: 1px solid #e5e7eb;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    .modal-header h3 {\n        font-size: 1.25rem;\n        font-weight: 600;\n        color: #1f2937;\n        margin: 0;\n    }\n\n    .modal-header button {\n        background: none;\n        border: none;\n        font-size: 1.5rem;\n        cursor: pointer;\n        color: #6b7280;\n        padding: 0.5rem;\n        border-radius: 4px;\n    }\n\n    .modal-header button:hover {\n        background: #f3f4f6;\n        color: #374151;\n    }\n\n    .modal-body {\n        padding: 1.5rem;\n    }\n\n    .network-details {\n        margin-bottom: 1.5rem;\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: 1rem;\n        max-width: 100%;\n    }\n\n    .detail-card {\n        background: #ffffff;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        padding: 1rem;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n        transition: box-shadow 0.2s ease;\n        max-width: 100%;\n        overflow: hidden;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n    }\n\n    .detail-card:hover {\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .detail-label {\n        font-weight: 600;\n        color: #6b7280;\n        font-size: 0.75rem;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n        margin-bottom: 0.5rem;\n        display: block;\n    }\n\n    .detail-value {\n        color: #1f2937;\n        font-size: 0.875rem;\n        font-weight: 500;\n        word-break: break-word;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        line-height: 1.4;\n        max-width: 100%;\n    }\n\n    .timing-breakdown {\n        background: #f9fafb;\n        border-radius: 8px;\n        padding: 1rem;\n        max-width: 100%;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        box-sizing: border-box;\n    }\n\n    .timing-breakdown h4 {\n        margin: 0 0 1rem 0;\n        color: #374151;\n        font-size: 0.875rem;\n        font-weight: 600;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n    }\n\n    .timing-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n        gap: 0.75rem;\n        max-width: 100%;\n    }\n\n    .timing-card {\n        background: #ffffff;\n        border: 1px solid #e5e7eb;\n        border-radius: 6px;\n        padding: 0.75rem;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n        transition: box-shadow 0.2s ease;\n        max-width: 100%;\n        overflow: hidden;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n    }\n\n    .timing-card:hover {\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .timing-label {\n        color: #6b7280;\n        font-weight: 500;\n        font-size: 0.75rem;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n        margin-bottom: 0.25rem;\n        display: block;\n    }\n\n    .timing-value {\n        color: #1f2937;\n        font-weight: 600;\n        font-size: 0.875rem;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        max-width: 100%;\n    }\n\n    /* Tabulator Custom Styling to Match Dashboard */\n    .tabulator {\n        background: #ffffff;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        font-family: inherit;\n    }\n\n    .tabulator .tabulator-header {\n        background: #f8fafc;\n        border-bottom: 1px solid #e5e7eb;\n    }\n\n    .tabulator .tabulator-header .tabulator-col {\n        background: #f8fafc;\n        border-right: 1px solid #e5e7eb;\n        color: #374151;\n        font-weight: 600;\n        font-size: 0.875rem;\n    }\n\n    .tabulator .tabulator-header .tabulator-col:hover {\n        background: #f1f5f9;\n        color: #1f2937;\n    }\n\n    .tabulator .tabulator-header .tabulator-col.tabulator-sortable:hover {\n        background: #f1f5f9;\n        color: #3b82f6;\n    }\n\n    .tabulator .tabulator-header .tabulator-col.tabulator-sorted {\n        background: #f1f5f9;\n        color: #3b82f6;\n    }\n\n    .tabulator .tabulator-header .tabulator-col.tabulator-sorted .tabulator-col-sorter {\n        color: #3b82f6;\n    }\n\n    .tabulator .tabulator-tableholder {\n        background: #ffffff;\n    }\n\n    .tabulator .tabulator-tableholder .tabulator-table {\n        background: #ffffff;\n    }\n\n    .tabulator .tabulator-row {\n        background: #ffffff;\n        border-bottom: 1px solid #f3f4f6;\n        color: #374151;\n    }\n\n    .tabulator .tabulator-row:hover {\n        background: #f8fafc;\n        color: #1f2937;\n    }\n\n    .tabulator .tabulator-row.tabulator-selectable:hover {\n        background: #f1f5f9;\n        color: #1f2937;\n    }\n\n    .tabulator .tabulator-row.tabulator-selected {\n        background: #dbeafe;\n        color: #1e40af;\n    }\n\n    .tabulator .tabulator-row.tabulator-selected:hover {\n        background: #bfdbfe;\n        color: #1e40af;\n    }\n\n    .tabulator .tabulator-cell {\n        border-right: 1px solid #f3f4f6;\n        padding: 0.75rem 1rem;\n        font-size: 0.875rem;\n        color: #374151;\n    }\n\n    .tabulator .tabulator-row:hover .tabulator-cell {\n        color: #1f2937;\n    }\n\n    .tabulator .tabulator-footer {\n        background: #f8fafc;\n        border-top: 1px solid #e5e7eb;\n        color: #6b7280;\n        font-size: 0.875rem;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page {\n        background: #ffffff;\n        border: 1px solid #d1d5db;\n        color: #374151;\n        margin: 0 2px;\n        padding: 0.5rem 0.75rem;\n        border-radius: 4px;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page:hover {\n        background: #f3f4f6;\n        color: #1f2937;\n        border-color: #9ca3af;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page.active {\n        background: #3b82f6;\n        color: #ffffff;\n        border-color: #3b82f6;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page.active:hover {\n        background: #2563eb;\n        border-color: #2563eb;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page-size {\n        background: #ffffff;\n        border: 1px solid #d1d5db;\n        color: #374151;\n        padding: 0.5rem 0.75rem;\n        border-radius: 4px;\n        margin: 0 4px;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page-size:hover {\n        background: #f3f4f6;\n        color: #1f2937;\n        border-color: #9ca3af;\n    }\n\n    .tabulator .tabulator-footer .tabulator-page-size.active {\n        background: #3b82f6;\n        color: #ffffff;\n        border-color: #3b82f6;\n    }\n\n    /* Search and Filter Styling */\n    .tabulator .tabulator-header-filter {\n        background: #ffffff;\n        border: 1px solid #d1d5db;\n        border-radius: 4px;\n        padding: 0.5rem;\n        font-size: 0.875rem;\n        color: #374151;\n    }\n\n    .tabulator .tabulator-header-filter:focus {\n        outline: none;\n        border-color: #3b82f6;\n        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n    }\n\n    /* Loading and Empty States */\n    .tabulator .tabulator-loading {\n        background: rgba(248, 250, 252, 0.8);\n        color: #6b7280;\n    }\n\n    .tabulator .tabulator-empty {\n        background: #ffffff;\n        color: #6b7280;\n    }\n\n    /* Expandable Row Styling */\n    .tabulator .tabulator-row-expanded {\n        background: #f1f5f9 !important;\n        border-left: 3px solid #3b82f6;\n    }\n\n    .tabulator .tabulator-row-expanded .tabulator-cell {\n        background: #f1f5f9 !important;\n    }\n\n    .tabulator-row-expanded-content {\n        background: #f8fafc;\n        border-left: 3px solid #3b82f6;\n        border-bottom: 1px solid #e5e7eb;\n        animation: expandRow 0.3s ease-out;\n        overflow-x: hidden;\n        overflow-y: auto;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        max-width: 100%;\n        box-sizing: border-box;\n        max-height: 500px;\n        pointer-events: auto;\n        position: relative;\n        z-index: 1;\n    }\n\n    .tabulator-row-expanded-content > div {\n        max-width: 100%;\n        overflow: visible;\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        box-sizing: border-box;\n    }\n\n    @keyframes expandRow {\n        from {\n            opacity: 0;\n            max-height: 0;\n            padding: 0;\n        }\n        to {\n            opacity: 1;\n            max-height: 1000px;\n            padding: 1rem;\n        }\n    }\n\n    .expand-icon {\n        display: inline-block;\n        width: 16px;\n        height: 16px;\n        margin-right: 0.5rem;\n        transition: transform 0.2s ease;\n        cursor: pointer;\n        user-select: none;\n    }\n\n    .expand-icon:hover {\n        color: #3b82f6;\n    }\n\n    /* Responsive Design */\n    @media (max-width: 768px) {\n        .tabulator .tabulator-cell {\n            padding: 0.5rem 0.75rem;\n            font-size: 0.8rem;\n        }\n        \n        .tabulator .tabulator-header .tabulator-col {\n            font-size: 0.8rem;\n            padding: 0.5rem 0.75rem;\n        }\n\n        /* Mobile responsive expanded rows */\n        .tabulator-row-expanded-content {\n            padding: 0.75rem;\n            max-height: 800px;\n            max-width: 100%;\n            overflow-x: hidden;\n            overflow-y: auto;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .tabulator-row-expanded-content > div {\n            max-width: 100%;\n            overflow: visible;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .network-details {\n            grid-template-columns: 1fr;\n            gap: 0.75rem;\n        }\n\n        .detail-card {\n            padding: 0.75rem;\n        }\n\n        .detail-label {\n            font-size: 0.7rem;\n        }\n\n        .detail-value {\n            font-size: 0.8rem;\n        }\n\n        .timing-grid {\n            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n            gap: 0.5rem;\n        }\n\n        .timing-card {\n            padding: 0.5rem;\n        }\n\n        .timing-label {\n            font-size: 0.7rem;\n        }\n\n        .timing-value {\n            font-size: 0.8rem;\n        }\n\n        .timing-breakdown {\n            padding: 0.75rem;\n            max-width: 100%;\n            overflow: hidden;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .timing-item {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 0.25rem;\n            padding: 0.4rem 0;\n            max-width: 100%;\n            overflow: hidden;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .timing-label {\n            min-width: auto;\n            font-size: 0.8rem;\n            max-width: 100%;\n            overflow: hidden;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .timing-value {\n            text-align: left;\n            font-size: 0.8rem;\n            max-width: 100%;\n            overflow: hidden;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n    }\n\n    @media (max-width: 480px) {\n        .tabulator-row-expanded-content {\n            padding: 0.5rem;\n            max-height: 600px;\n            max-width: 100%;\n            overflow-x: hidden;\n            overflow-y: auto;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .tabulator-row-expanded-content > div {\n            max-width: 100%;\n            overflow: visible;\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n\n        .network-details {\n            grid-template-columns: 1fr;\n            gap: 0.5rem;\n        }\n\n        .detail-card {\n            padding: 0.5rem;\n        }\n\n        .detail-label {\n            font-size: 0.65rem;\n        }\n\n        .detail-value {\n            font-size: 0.75rem;\n        }\n\n        .timing-grid {\n            grid-template-columns: 1fr;\n            gap: 0.4rem;\n        }\n\n        .timing-card {\n            padding: 0.4rem;\n        }\n\n        .timing-label {\n            font-size: 0.65rem;\n        }\n\n        .timing-value {\n            font-size: 0.75rem;\n        }\n\n        .timing-breakdown {\n            padding: 0.5rem;\n        }\n    }\n\n    .resource-type {\n        padding: 0.25rem 0.5rem;\n        border-radius: 4px;\n        font-size: 0.75rem;\n        font-weight: 500;\n        text-transform: uppercase;\n    }\n\n    .resource-type.document { background: #dbeafe; color: #1e40af; }\n    .resource-type.script { background: #fce7f3; color: #be185d; }\n    .resource-type.stylesheet { background: #dcfce7; color: #166534; }\n    .resource-type.image { background: #fef3c7; color: #92400e; }\n    .resource-type.font { background: #e0e7ff; color: #3730a3; }\n    .resource-type.xhr { background: #f3f4f6; color: #374151; }\n\n    .status-badge {\n        padding: 0.25rem 0.5rem;\n        border-radius: 4px;\n        font-size: 0.75rem;\n        font-weight: 500;\n    }\n\n    .status-success {\n        background: #dcfce7;\n        color: #166534;\n    }\n\n    .priority-badge {\n        padding: 0.25rem 0.5rem;\n        border-radius: 4px;\n        font-size: 0.75rem;\n        font-weight: 500;\n    }\n\n    .priority-high {\n        background: #fecaca;\n        color: #dc2626;\n    }\n\n    .priority-medium {\n        background: #f3f4f6;\n        color: #374151;\n    }\n\n    .view-btn {\n        background: #3b82f6;\n        color: white;\n        border: none;\n        padding: 0.375rem 0.75rem;\n        border-radius: 4px;\n        font-size: 0.75rem;\n        font-weight: 500;\n        cursor: pointer;\n        transition: background-color 0.2s ease;\n    }\n\n    .view-btn:hover {\n        background: #2563eb;\n    }\n\n    .view-btn:active {\n        background: #1d4ed8;\n    }\n\n    /* JavaScript Profiler Section */\n    .js-profiler {\n        background: white;\n        border-radius: 8px;\n        border: 1px solid #e5e7eb;\n        overflow: hidden;\n    }\n\n    .profiler-content {\n        padding: 1.5rem;\n    }\n\n    .function-list {\n        margin-bottom: 1.5rem;\n    }\n\n    .function-item {\n        display: flex;\n        align-items: center;\n        margin-bottom: 0.75rem;\n    }\n\n    .function-name {\n        font-size: 0.875rem;\n        font-weight: 500;\n        color: #1f2937;\n        margin-right: 1rem;\n        min-width: 200px;\n    }\n\n    .function-bar {\n        flex: 1;\n        height: 8px;\n        background: #e5e7eb;\n        border-radius: 4px;\n        margin-right: 1rem;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .function-bar-fill {\n        height: 100%;\n        background: #3b82f6;\n        border-radius: 4px;\n    }\n\n    .function-time {\n        font-size: 0.75rem;\n        color: #6b7280;\n        min-width: 80px;\n        text-align: right;\n    }\n\n    .function-chart {\n        height: 200px;\n        margin-bottom: 1.5rem;\n    }\n\n    .profiler-stats {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        gap: 1rem;\n    }\n\n    .profiler-stat {\n        text-align: center;\n        padding: 1rem;\n        background: #f9fafb;\n        border-radius: 6px;\n    }\n\n    .profiler-stat-value {\n        font-size: 1.25rem;\n        font-weight: 700;\n        color: #1f2937;\n        margin-bottom: 0.25rem;\n    }\n\n    .profiler-stat-label {\n        font-size: 0.75rem;\n        color: #6b7280;\n        font-weight: 500;\n    }\n\n    /* Performance Summary */\n    .performance-summary {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        gap: 1rem;\n    }\n\n    .summary-card {\n        background: white;\n        border-radius: 8px;\n        padding: 1.5rem;\n        border: 1px solid #e5e7eb;\n        text-align: center;\n    }\n\n    .summary-value {\n        font-size: 1.5rem;\n        font-weight: 700;\n        color: #1f2937;\n        margin-bottom: 0.25rem;\n    }\n\n    .summary-label {\n        font-size: 0.875rem;\n        color: #6b7280;\n        font-weight: 500;\n    }\n\n    /* Charts */\n    .chart-container {\n        position: relative;\n        height: 300px;\n        margin: 1rem 0;\n    }\n\n    /* Responsive Design */\n    @media (max-width: 1024px) {\n        .content-grid {\n            grid-template-columns: 1fr;\n        }\n        \n        .vitals-grid {\n            grid-template-columns: repeat(2, 1fr);\n        }\n    }\n\n    @media (max-width: 768px) {\n        .dashboard-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 1rem;\n        }\n        \n        .nav-tabs {\n            padding: 0 1rem;\n            overflow-x: auto;\n        }\n        \n        .dashboard-content {\n            padding: 1rem;\n        }\n        \n        .vitals-grid {\n            grid-template-columns: 1fr;\n        }\n        \n        .performance-summary {\n            grid-template-columns: repeat(2, 1fr);\n        }\n        \n        .profiler-stats {\n            grid-template-columns: repeat(2, 1fr);\n        }\n    }\n\n    @media (max-width: 480px) {\n        .performance-summary {\n            grid-template-columns: 1fr;\n        }\n        \n        .profiler-stats {\n            grid-template-columns: 1fr;\n        }\n    }\n    `;\n}\n\n/**\n * Creates JavaScript for interactive features\n */\nfunction getJavaScript(): string {\n    return `\n    document.addEventListener('DOMContentLoaded', function() {\n        initializeTabs();\n        initializeCharts();\n        initializeNetworkTables();\n    });\n\n    function initializeTabs() {\n        const tabs = document.querySelectorAll('.nav-tab');\n        const tabContents = document.querySelectorAll('.tab-content');\n        \n        tabs.forEach(tab => {\n            tab.addEventListener('click', function() {\n                const targetTab = this.getAttribute('data-tab');\n                \n                // Remove active class from all tabs and contents\n                tabs.forEach(t => t.classList.remove('active'));\n                tabContents.forEach(content => content.classList.remove('active'));\n                \n                // Add active class to clicked tab and corresponding content\n                this.classList.add('active');\n                const targetContent = document.getElementById(targetTab);\n                if (targetContent) {\n                    targetContent.classList.add('active');\n                }\n            });\n        });\n    }\n\n    function initializeNetworkTables() {\n        // Initialize overview network table\n        const overviewTable = document.querySelector('[id^=\"networkTable-\"]');\n        \n        if (overviewTable && window.dashboardData) {\n            const allRequests = [];\n            window.dashboardData.forEach(report => {\n                if (report.network?.requests) {\n                    allRequests.push(...report.network.requests.map(req => ({\n                        ...req,\n                        urlShortName: (req.url.split('/').pop() || req.url).substring(0, 20) + '...',\n                        sizeFormatted: formatBytes(req.transferSize),\n                        timeFormatted: req.responseTime.toFixed(0) + 'ms',\n                        statusFormatted: 'Success',\n                        priorityFormatted: 'High'\n                    })));\n                }\n            });\n            \n            new Tabulator(overviewTable, {\n                data: allRequests.sort((a, b) => b.responseTime - a.responseTime),\n                layout: \"fitColumns\",\n                pagination: \"local\",\n                paginationSize: 10,\n                paginationSizeSelector: [5, 10, 20, 50],\n                movableColumns: true,\n                resizableRows: true,\n                tooltips: true,\n                theme: \"default\",\n                headerFilterPlaceholder: \"Search...\",\n                placeholder: \"No network requests found\",\n                columns: [\n                    {\n                        title: \"URL Short Name\",\n                        field: \"urlShortName\",\n                        width: 200,\n                        sorter: \"string\",\n                        formatter: function(cell, formatterParams, onRendered) {\n                            return cell.getValue();\n                        }\n                    },\n                    {\n                        title: \"Domain\",\n                        field: \"domain\",\n                        width: 150,\n                        sorter: \"string\"\n                    },\n                    {\n                        title: \"Type\",\n                        field: \"resourceType\",\n                        width: 100,\n                        sorter: \"string\",\n                        formatter: function(cell, formatterParams, onRendered) {\n                            const type = cell.getValue();\n                            return '<span class=\"resource-type ' + type + '\">' + type + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Size\",\n                        field: \"sizeFormatted\",\n                        width: 100,\n                        sorter: \"number\",\n                        sorterParams: {column: \"transferSize\"}\n                    },\n                    {\n                        title: \"Time\",\n                        field: \"timeFormatted\",\n                        width: 100,\n                        sorter: \"number\",\n                        sorterParams: {column: \"responseTime\"}\n                    },\n                    {\n                        title: \"Status\",\n                        field: \"statusFormatted\",\n                        width: 100,\n                        sorter: \"string\",\n                        formatter: function(cell, formatterParams, onRendered) {\n                            return '<span class=\"status-badge status-success\">' + cell.getValue() + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Priority\",\n                        field: \"priorityFormatted\",\n                        width: 100,\n                        sorter: \"string\",\n                        formatter: function(cell, formatterParams, onRendered) {\n                            return '<span class=\"priority-badge priority-high\">' + cell.getValue() + '</span>';\n                        }\n                    },\n                    {\n                        title: \"Actions\",\n                        field: \"actions\",\n                        width: 80,\n                        formatter: function(cell, formatterParams, onRendered) {\n                            return '<button class=\"view-btn\" onclick=\"showNetworkDetailsModal(' + JSON.stringify(cell.getRow().getData()).replace(/\"/g, '&quot;') + ')\">View</button>';\n                        }\n                    }\n                ]\n            });\n        }\n        \n        // Initialize scenario network tables\n        const scenarioTables = document.querySelectorAll('[id^=\"scenarioNetworkTable-\"]');\n        \n        scenarioTables.forEach((table, index) => {\n            if (window.dashboardData && window.dashboardData[index]?.network?.requests) {\n                const requests = window.dashboardData[index].network.requests.map(req => ({\n                    ...req,\n                    urlShortName: (req.url.split('/').pop() || req.url).substring(0, 20) + '...',\n                    sizeFormatted: formatBytes(req.transferSize),\n                    timeFormatted: req.responseTime.toFixed(0) + 'ms',\n                    statusFormatted: 'Success',\n                    priorityFormatted: 'High'\n                }));\n                \n                new Tabulator(table, {\n                    data: requests,\n                    layout: \"fitColumns\",\n                    pagination: \"local\",\n                    paginationSize: 10,\n                    paginationSizeSelector: [5, 10, 20, 50],\n                    movableColumns: true,\n                    resizableRows: false,\n                    tooltips: true,\n                    theme: \"default\",\n                    headerFilterPlaceholder: \"Search...\",\n                    placeholder: \"No network requests found\",\n\n                    columns: [\n                        {\n                            title: \"URL Short Name\",\n                            field: \"urlShortName\",\n                            width: 200,\n                            sorter: \"string\",\n                            formatter: function(cell, formatterParams, onRendered) {\n                                return cell.getValue();\n                            }\n                        },\n                        {\n                            title: \"Domain\",\n                            field: \"domain\",\n                            width: 150,\n                            sorter: \"string\"\n                        },\n                        {\n                            title: \"Type\",\n                            field: \"resourceType\",\n                            width: 100,\n                            sorter: \"string\",\n                            formatter: function(cell, formatterParams, onRendered) {\n                                const type = cell.getValue();\n                                return '<span class=\"resource-type ' + type + '\">' + type + '</span>';\n                            }\n                        },\n                        {\n                            title: \"Size\",\n                            field: \"sizeFormatted\",\n                            width: 100,\n                            sorter: \"number\",\n                            sorterParams: {column: \"transferSize\"}\n                        },\n                        {\n                            title: \"Time\",\n                            field: \"timeFormatted\",\n                            width: 100,\n                            sorter: \"number\",\n                            sorterParams: {column: \"responseTime\"}\n                        },\n                        {\n                            title: \"Status\",\n                            field: \"statusFormatted\",\n                            width: 100,\n                            sorter: \"string\",\n                            formatter: function(cell, formatterParams, onRendered) {\n                                return '<span class=\"status-badge status-success\">' + cell.getValue() + '</span>';\n                            }\n                        },\n                        {\n                            title: \"Priority\",\n                            field: \"priorityFormatted\",\n                            width: 100,\n                            sorter: \"string\",\n                            formatter: function(cell, formatterParams, onRendered) {\n                                return '<span class=\"priority-badge priority-high\">' + cell.getValue() + '</span>';\n                            }\n                        },\n                        {\n                            title: \"Actions\",\n                            field: \"actions\",\n                            width: 80,\n                            formatter: function(cell, formatterParams, onRendered) {\n                                return '<button class=\"view-btn\" onclick=\"showNetworkDetailsModal(' + JSON.stringify(cell.getRow().getData()).replace(/\"/g, '&quot;') + ')\">View</button>';\n                            }\n                        }\n                    ],\n\n                });\n            }\n        });\n    }\n    \n    function showNetworkDetailsModal(requestData) {\n        // Remove any existing modal\n        const existingModal = document.querySelector('.network-details-modal');\n        if (existingModal) {\n            existingModal.remove();\n        }\n        \n        const modal = document.createElement('div');\n        modal.className = 'network-details-modal';\n        modal.innerHTML = \\`\n            <div class=\"modal-backdrop\" onclick=\"this.parentElement.remove()\"></div>\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>Network Request Details</h3>\n                    <button onclick=\"this.closest('.network-details-modal').remove()\">×</button>\n                </div>\n                <div class=\"modal-body\">\n                    \\${createNetworkRequestDetailsHTML(requestData)}\n                </div>\n            </div>\n        \\`;\n        document.body.appendChild(modal);\n        \n        // Add escape key listener\n        const handleEscape = function(e) {\n            if (e.key === 'Escape') {\n                modal.remove();\n                document.removeEventListener('keydown', handleEscape);\n            }\n        };\n        document.addEventListener('keydown', handleEscape);\n    }\n    \n    function showNetworkDetails(requestData) {\n        showNetworkDetailsModal(requestData);\n    }\n    \n    function createNetworkRequestDetailsHTML(request) {\n        const timing = request.timing || {};\n        const headers = request.headers || {};\n        \n        return \\`\n            <div class=\"network-details\">\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Full URL</div>\n                    <div class=\"detail-value\">\\${request.url}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Method</div>\n                    <div class=\"detail-value\">\\${request.method || 'GET'}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Status Code</div>\n                    <div class=\"detail-value\">\\${request.status || 'N/A'}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Domain</div>\n                    <div class=\"detail-value\">\\${request.domain || 'N/A'}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Protocol</div>\n                    <div class=\"detail-value\">\\${request.protocol || 'N/A'}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Cache Status</div>\n                    <div class=\"detail-value\">\\${request.cacheStatus || 'N/A'}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Transfer Size</div>\n                    <div class=\"detail-value\">\\${formatBytes(request.transferSize || 0)}</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Encoded Size</div>\n                    <div class=\"detail-value\">\\${formatBytes(request.encodedBodySize || 0)}</div>\n                </div>\n                \\${request.connection ? \\`\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Remote IP</div>\n                    <div class=\"detail-value\">\\${request.connection.remoteIP}:\\${request.connection.remotePort}</div>\n                </div>\n                \\` : ''}\n                \\${request.security ? \\`\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">Security State</div>\n                    <div class=\"detail-value\">\\${request.security.state}</div>\n                </div>\n                \\` : ''}\n            </div>\n            \n            <div class=\"timing-breakdown\">\n                <h4>Timing Breakdown</h4>\n                <div class=\"timing-grid\">\n                    <div class=\"timing-card \\${timing.dnsLookup > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">DNS Lookup</div>\n                        <div class=\"timing-value\">\\${timing.dnsLookup > 0 ? timing.dnsLookup.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.dnsLookup === 0 ? '<div class=\"timing-note\">Connection reused</div>' : ''}\n                    </div>\n                    <div class=\"timing-card \\${timing.tcpConnect > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">TCP Connect</div>\n                        <div class=\"timing-value\">\\${timing.tcpConnect > 0 ? timing.tcpConnect.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.tcpConnect === 0 ? '<div class=\"timing-note\">Connection reused</div>' : ''}\n                    </div>\n                    <div class=\"timing-card \\${timing.sslHandshake > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">SSL Handshake</div>\n                        <div class=\"timing-value\">\\${timing.sslHandshake > 0 ? timing.sslHandshake.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.sslHandshake === 0 ? '<div class=\"timing-note\">HTTP or reused</div>' : ''}\n                    </div>\n                    <div class=\"timing-card \\${timing.requestSend > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">Request Send</div>\n                        <div class=\"timing-value\">\\${timing.requestSend > 0 ? timing.requestSend.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.requestSend === 0 ? '<div class=\"timing-note\">Cached or fast</div>' : ''}\n                    </div>\n                    <div class=\"timing-card \\${timing.waitTime > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">Server Wait</div>\n                        <div class=\"timing-value\">\\${timing.waitTime > 0 ? timing.waitTime.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.waitTime === 0 ? '<div class=\"timing-note\">Instant response</div>' : ''}\n                    </div>\n                    <div class=\"timing-card \\${timing.responseReceive > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">Response Receive</div>\n                        <div class=\"timing-value\">\\${timing.responseReceive > 0 ? timing.responseReceive.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.responseReceive === 0 ? '<div class=\"timing-note\">Small payload</div>' : ''}\n                    </div>\n                    <div class=\"timing-card \\${timing.contentDownloadTime > 0 ? '' : 'timing-unavailable'}\">\n                        <div class=\"timing-label\">Content Download</div>\n                        <div class=\"timing-value\">\\${timing.contentDownloadTime > 0 ? timing.contentDownloadTime.toFixed(2) + 'ms' : 'N/A'}</div>\n                        \\${timing.contentDownloadTime === 0 ? '<div class=\"timing-note\">Headers only</div>' : ''}\n                    </div>\n                    \\${timing.redirectTime > 0 ? \\`\n                    <div class=\"timing-card\">\n                        <div class=\"timing-label\">Redirect Time</div>\n                        <div class=\"timing-value\">\\${timing.redirectTime.toFixed(2)}ms</div>\n                    </div>\n                    \\` : ''}\n                    <div class=\"timing-card\" style=\"border: 2px solid #3b82f6; background: #f0f9ff;\">\n                        <div class=\"timing-label\" style=\"color: #1e40af; font-weight: 600;\">Total Time</div>\n                        <div class=\"timing-value\" style=\"color: #1e40af; font-weight: 700; font-size: 1rem;\">\\${(request.responseTime || 0).toFixed(2)}ms</div>\n                    </div>\n                    \\${timing.timingSum && Math.abs(timing.totalTime - timing.timingSum) > 1 ? \\`\n                    <div class=\"timing-card\" style=\"border: 2px solid \\${timing.timingSum > timing.totalTime ? '#dc2626' : '#f59e0b'}; background: \\${timing.timingSum > timing.totalTime ? '#fef2f2' : '#fffbeb'};\">\n                        <div class=\"timing-label\" style=\"color: \\${timing.timingSum > timing.totalTime ? '#dc2626' : '#92400e'}; font-weight: 600;\">Timing Sum</div>\n                        <div class=\"timing-value\" style=\"color: \\${timing.timingSum > timing.totalTime ? '#dc2626' : '#92400e'}; font-weight: 700; font-size: 1rem;\">\\${timing.timingSum.toFixed(2)}ms</div>\n                        <div class=\"timing-note\" style=\"color: \\${timing.timingSum > timing.totalTime ? '#dc2626' : '#92400e'}; margin-top: 0.25rem; font-size: 0.7rem;\">\n                            \\${timing.timingSum > timing.totalTime ? 'Overlapping operations' : 'Sum of breakdown components'}\n                        </div>\n                    </div>\n                    \\` : ''}\n                </div>\n                \\${timing.fromCache ? '<div class=\"cache-notice\">📦 This resource was served from cache</div>' : ''}\n                \\${timing.connectionReused ? '<div class=\"connection-notice\">🔄 Connection was reused (faster)</div>' : ''}\n                \\${timing.timingSum && Math.abs(timing.totalTime - timing.timingSum) > 1 ? \\`\n                <div class=\"timing-discrepancy-notice\">\n                    \\${timing.timingSum > timing.totalTime ? \\`\n                        ⚠️ Timing discrepancy: Timing sum (\\${timing.timingSum.toFixed(2)}ms) > Total time (\\${timing.totalTime.toFixed(2)}ms). \n                        This indicates overlapping network operations or concurrent requests that share connection setup time.\n                    \\` : \\`\n                        ⚠️ Timing discrepancy: Total time (\\${timing.totalTime.toFixed(2)}ms) includes response body download time, \n                        while breakdown sum (\\${timing.timingSum.toFixed(2)}ms) only includes headers received time.\n                    \\`}\n                </div>\n                \\` : ''}\n            </div>\n            \n            \\${request.headers ? \\`\n            <div class=\"headers-section\">\n                <h4>Request & Response Headers</h4>\n                <div class=\"headers-grid\">\n                    <div class=\"headers-card\">\n                        <h5>Request Headers</h5>\n                        <div class=\"headers-list\">\n                            \\${Object.entries(request.headers.request || {}).map(([key, value]) => \\`\n                                <div class=\"header-item\">\n                                    <span class=\"header-key\">\\${key}:</span>\n                                    <span class=\"header-value\">\\${value}</span>\n                                </div>\n                            \\`).join('')}\n                        </div>\n                    </div>\n                    <div class=\"headers-card\">\n                        <h5>Response Headers</h5>\n                        <div class=\"headers-list\">\n                            \\${Object.entries(request.headers.response || {}).map(([key, value]) => \\`\n                                <div class=\"header-item\">\n                                    <span class=\"header-key\">\\${key}:</span>\n                                    <span class=\"header-value\">\\${value}</span>\n                                </div>\n                            \\`).join('')}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \\` : ''}\n            \n            \\${request.security?.details ? \\`\n            <div class=\"security-section\">\n                <h4>Security Details</h4>\n                <div class=\"security-grid\">\n                    <div class=\"security-card\">\n                        <div class=\"security-label\">Protocol</div>\n                        <div class=\"security-value\">\\${request.security.details.protocol}</div>\n                    </div>\n                    <div class=\"security-card\">\n                        <div class=\"security-label\">Cipher</div>\n                        <div class=\"security-value\">\\${request.security.details.cipher}</div>\n                    </div>\n                    <div class=\"security-card\">\n                        <div class=\"security-label\">Certificate Subject</div>\n                        <div class=\"security-value\">\\${request.security.details.subjectName}</div>\n                    </div>\n                    <div class=\"security-card\">\n                        <div class=\"security-label\">Issuer</div>\n                        <div class=\"security-value\">\\${request.security.details.issuer}</div>\n                    </div>\n                </div>\n            </div>\n            \\` : ''}\n        \\`;\n    }\n    \n    function formatBytes(bytes) {\n        if (bytes === 0) return '0 B';\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    function initializeNetworkRows() {\n        const networkRows = document.querySelectorAll('.network-row');\n        \n        networkRows.forEach(row => {\n            row.addEventListener('click', function() {\n                const index = this.getAttribute('data-index');\n                const expandableRow = document.querySelector(\\`.expandable-row[data-index=\"\\${index}\"]\\`);\n                const expandIcon = this.querySelector('.expand-icon');\n                \n                if (expandableRow && expandIcon) {\n                    const isExpanded = expandableRow.classList.contains('active');\n                    \n                    if (isExpanded) {\n                        // Collapse\n                        expandableRow.classList.remove('active');\n                        this.classList.remove('expanded');\n                        expandIcon.classList.remove('expanded');\n                        expandIcon.textContent = '▶';\n                    } else {\n                        // Expand\n                        expandableRow.classList.add('active');\n                        this.classList.add('expanded');\n                        expandIcon.classList.add('expanded');\n                        expandIcon.textContent = '▼';\n                    }\n                }\n            });\n        });\n    }\n\n    function initializeCharts() {\n        // Initialize any charts that need to be rendered\n        const chartContainers = document.querySelectorAll('.chart-container');\n        \n        chartContainers.forEach(container => {\n            const canvas = container.querySelector('canvas');\n            if (!canvas) return;\n            \n            const ctx = canvas.getContext('2d');\n            const data = JSON.parse(canvas.dataset.chartData || '{}');\n            \n            if (Object.keys(data).length > 0) {\n                new Chart(ctx, {\n                    type: 'doughnut',\n                    data: {\n                        labels: Object.keys(data),\n                        datasets: [{\n                            data: Object.values(data),\n                            backgroundColor: [\n                                '#3b82f6',\n                                '#10b981',\n                                '#f59e0b',\n                                '#ef4444',\n                                '#8b5cf6',\n                                '#06b6d4'\n                            ],\n                            borderWidth: 0\n                        }]\n                    },\n                    options: {\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        plugins: {\n                            legend: {\n                                position: 'bottom',\n                                labels: {\n                                    padding: 20,\n                                    usePointStyle: true\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        });\n    }\n  `;\n}\n\n/**\n * Calculates overall performance score\n */\nfunction calculateOverallScore(reports: WebVitalsReport[]): number {\n    if (reports.length === 0) return 0;\n    \n    let totalScore = 0;\n    let validReports = 0;\n    \n    reports.forEach(report => {\n        const score = calculateScenarioScore(report);\n        if (score > 0) {\n            totalScore += score;\n            validReports++;\n        }\n    });\n    \n    return validReports > 0 ? Math.round(totalScore / validReports) : 0;\n}\n\n/**\n * Calculates score for a single scenario\n */\nfunction calculateScenarioScore(report: WebVitalsReport): number {\n    const metrics = report.metrics;\n    if (!metrics) return 0;\n    \n    let score = 0;\n    let validMetrics = 0;\n    \n    // FCP scoring (0-25 points)\n    if (metrics.FCP !== undefined) {\n        if (metrics.FCP <= 1800) score += 25;\n        else if (metrics.FCP <= 3000) score += 15;\n        else if (metrics.FCP <= 4000) score += 5;\n        validMetrics++;\n    }\n    \n    // LCP scoring (0-25 points)\n    if (metrics.LCP !== undefined) {\n        if (metrics.LCP <= 2500) score += 25;\n        else if (metrics.LCP <= 4000) score += 15;\n        else if (metrics.LCP <= 5000) score += 5;\n        validMetrics++;\n    }\n    \n    // CLS scoring (0-25 points)\n    if (metrics.CLS !== undefined) {\n        if (metrics.CLS <= 0.1) score += 25;\n        else if (metrics.CLS <= 0.25) score += 15;\n        else if (metrics.CLS <= 0.4) score += 5;\n        validMetrics++;\n    }\n    \n    // INP scoring (0-25 points)\n    if (metrics.INP !== undefined) {\n        if (metrics.INP <= 200) score += 25;\n        else if (metrics.INP <= 500) score += 15;\n        else if (metrics.INP <= 1000) score += 5;\n        validMetrics++;\n    }\n    \n    return validMetrics > 0 ? Math.round((score / (validMetrics * 25)) * 100) : 0;\n}\n\n/**\n * Gets score label based on score value\n */\nfunction getScoreLabel(score: number): string {\n    if (score >= 90) return 'Excellent';\n    if (score >= 75) return 'Good';\n    if (score >= 50) return 'Needs Improvement';\n    return 'Poor';\n}\n\n/**\n * Creates overview content\n */\nfunction createOverviewContent(reports: WebVitalsReport[]): string {\n    return `\n        <!-- Performance Scores by Scenario -->\n        <div class=\"performance-scores\">\n            <h2 class=\"section-title\">Performance Scores by Scenario</h2>\n            <div class=\"scores-grid\">\n                ${reports.map(report => {\n                    const score = calculateScenarioScore(report);\n                    const status = getScoreLabel(score);\n                    const statusClass = status.toLowerCase().replace(' ', '-');\n                    return `\n                        <div class=\"score-card ${statusClass}\">\n                            <div class=\"score-card-value\">${score}</div>\n                            <div class=\"score-card-label\">${report.scenario}</div>\n                            <div class=\"score-card-status ${statusClass}\">${status}</div>\n                        </div>\n                    `;\n                }).join('')}\n            </div>\n        </div>\n\n        <!-- Core Web Vitals Comparison -->\n        <div class=\"core-web-vitals\">\n            <h2 class=\"section-title\">Core Web Vitals Comparison</h2>\n        <div class=\"vitals-grid\">\n            ${createVitalCard('First Contentful Paint', 'FCP', reports, 'Time when first text or image is painted', '1800ms')}\n            ${createVitalCard('Largest Contentful Paint', 'LCP', reports, 'Time when largest content element is painted', '2500ms')}\n            ${createVitalCard('Cumulative Layout Shift', 'CLS', reports, 'Visual stability of the page', '0.1')}\n            ${createVitalCard('Time to First Byte', 'TTFB', reports, 'Time between request and first byte received', '600ms')}\n        </div>\n        </div>\n\n        <!-- Content Grid -->\n        <div class=\"content-grid\">\n            ${createNetworkAnalysisSection(reports)}\n            ${createJavaScriptProfilerSection(reports)}\n        </div>\n\n        <!-- Performance Summary -->\n        <div class=\"performance-summary\">\n            ${createSummaryCard('Total Size', calculateTotalSize(reports) + ' MB')}\n            ${createSummaryCard('Load Time', calculateAverageLoadTime(reports) + 'ms')}\n            ${createSummaryCard('Requests', calculateTotalRequests(reports).toString())}\n            ${createSummaryCard('JS Execution', calculateAverageJSExecution(reports) + 'ms')}\n        </div>\n    `;\n}\n\n/**\n * Creates individual scenario content\n */\nfunction createScenarioContent(report: WebVitalsReport, index: number): string {\n    const score = calculateScenarioScore(report);\n    const status = getScoreLabel(score);\n    \n    return `\n        <!-- Scenario Header -->\n        <div class=\"performance-scores\">\n            <h2 class=\"section-title\">Performance Summary - ${report.scenario}</h2>\n            <div class=\"scores-grid\">\n                <div class=\"score-card ${status.toLowerCase().replace(' ', '-')}\">\n                    <div class=\"score-card-value\">${score}</div>\n                    <div class=\"score-card-label\">Scenario Score</div>\n                    <div class=\"score-card-status ${status.toLowerCase().replace(' ', '-')}\">${status}</div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Core Web Vitals for this scenario -->\n        <div class=\"core-web-vitals\">\n            <h2 class=\"section-title\">Core Web Vitals</h2>\n            <div class=\"vitals-grid\">\n                ${createSingleVitalCard('First Contentful Paint', report.metrics?.FCP, 'Time when first text or image is painted', '1800ms')}\n                ${createSingleVitalCard('Largest Contentful Paint', report.metrics?.LCP, 'Time when largest content element is painted', '2500ms')}\n                ${createSingleVitalCard('Cumulative Layout Shift', report.metrics?.CLS, 'Visual stability of the page', '0.1')}\n                ${createSingleVitalCard('Time to First Byte', report.metrics?.TTFB, 'Time between request and first byte received', '600ms')}\n            </div>\n        </div>\n\n        <!-- Content Grid -->\n        <div class=\"content-grid\">\n            ${createScenarioNetworkAnalysis(report)}\n            ${createScenarioJavaScriptProfiler(report)}\n        </div>\n\n        <!-- Performance Summary for this scenario -->\n        <div class=\"performance-summary\">\n            ${createSummaryCard('Total Size', formatBytes(report.network?.summary?.totalTransferSize || 0))}\n            ${createSummaryCard('Load Time', (report.performance?.loadTime || 0).toFixed(0) + 'ms')}\n            ${createSummaryCard('Requests', (report.network?.summary?.totalRequests || 0).toString())}\n            ${createSummaryCard('JS Execution', (report.profile?.summary?.totalExecutionTime || 0).toFixed(0) + 'ms')}\n        </div>\n    `;\n}\n\n/**\n * Creates vital card for overview (comparing across scenarios)\n */\nfunction createVitalCard(name: string, metric: string, reports: WebVitalsReport[], description: string, threshold: string): string {\n    const values = reports.map(r => r.metrics?.[metric as keyof typeof r.metrics]).filter(v => v !== undefined);\n    const average = values.length > 0 ? values.reduce((sum, val) => sum + (val as number), 0) / values.length : 0;\n    const status = getVitalStatus(metric, average);\n    \n    // Format value based on metric type\n    const formatValue = (value: number, metric: string): string => {\n        if (metric === 'CLS') {\n            return value.toFixed(3);\n        }\n        return value.toFixed(0) + 'ms';\n    };\n    \n    return `\n        <div class=\"vital-card\">\n            <div class=\"vital-header\">\n                <div class=\"vital-name\">${name}</div>\n                <div class=\"vital-status\">${status}</div>\n            </div>\n            <div class=\"vital-value\">${formatValue(average, metric)}</div>\n            <div class=\"vital-description\">${description}</div>\n            <div class=\"vital-chart\">\n                <div class=\"vital-chart-line\"></div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Creates vital card for single scenario\n */\nfunction createSingleVitalCard(name: string, value: number | undefined, description: string, threshold: string): string {\n    if (value === undefined) {\n        return `\n            <div class=\"vital-card\">\n                <div class=\"vital-header\">\n                    <div class=\"vital-name\">${name}</div>\n                    <div class=\"vital-status\">No Data</div>\n                </div>\n                <div class=\"vital-value\">N/A</div>\n                <div class=\"vital-description\">${description}</div>\n                <div class=\"vital-chart\">\n                    <div class=\"vital-chart-line\"></div>\n                </div>\n            </div>\n        `;\n    }\n    \n    const metric = name.split(' ')[0];\n    const status = getVitalStatus(metric, value);\n    \n    // Format value based on metric type\n    const formatValue = (value: number, metric: string): string => {\n        if (metric === 'CLS') {\n            return value.toFixed(3);\n        }\n        return value.toFixed(0) + 'ms';\n    };\n    \n    return `\n        <div class=\"vital-card\">\n            <div class=\"vital-header\">\n                <div class=\"vital-name\">${name}</div>\n                <div class=\"vital-status\">${status}</div>\n            </div>\n            <div class=\"vital-value\">${formatValue(value, metric)}</div>\n            <div class=\"vital-description\">${description}</div>\n            <div class=\"vital-chart\">\n                <div class=\"vital-chart-line\"></div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Gets vital status based on metric and value\n */\nfunction getVitalStatus(metric: string, value: number): string {\n    const thresholds = {\n        'FCP': { good: 1800, poor: 3000 },\n        'LCP': { good: 2500, poor: 4000 },\n        'CLS': { good: 0.1, poor: 0.25 },\n        'INP': { good: 200, poor: 500 },\n        'TTFB': { good: 600, poor: 1200 }\n    };\n    \n    const threshold = thresholds[metric as keyof typeof thresholds];\n    if (!threshold) return 'Good';\n    \n    if (value <= threshold.good) return 'Good';\n    if (value <= threshold.poor) return 'Needs Improvement';\n    return 'Poor';\n}\n\n/**\n * Creates network analysis section for overview\n */\nfunction createNetworkAnalysisSection(reports: WebVitalsReport[]): string {\n    const totalRequests = reports.reduce((sum, r) => sum + (r.network?.summary?.totalRequests || 0), 0);\n    const totalSize = reports.reduce((sum, r) => sum + (r.network?.summary?.totalTransferSize || 0), 0);\n    const avgResponseTime = reports.reduce((sum, r) => sum + (r.network?.summary?.averageResponseTime || 0), 0) / reports.length;\n    \n    return `\n        <div class=\"network-analysis\">\n            <div class=\"section-header\">\n                <h3>Network Request Analysis</h3>\n                <div class=\"section-summary\">\n                    <span>Total Requests: ${totalRequests}</span>\n                    <span>Total Size: ${formatBytes(totalSize)}</span>\n                    <span>Load Time: ${avgResponseTime.toFixed(0)}ms</span>\n                </div>\n            </div>\n            <div class=\"network-content\">\n                <div id=\"networkTable-${Date.now()}\"></div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Creates JavaScript profiler section for overview\n */\nfunction createJavaScriptProfilerSection(reports: WebVitalsReport[]): string {\n    const totalExecutionTime = reports.reduce((sum, r) => sum + (r.profile?.summary?.totalExecutionTime || 0), 0);\n    const totalFunctions = reports.reduce((sum, r) => sum + (r.profile?.summary?.totalFunctions || 0), 0);\n    const totalCalls = reports.reduce((sum, r) => sum + (r.profile?.summary?.totalCalls || 0), 0);\n    \n    return `\n        <div class=\"js-profiler\">\n            <div class=\"section-header\">\n                <h3>JavaScript Profiler</h3>\n                <div class=\"section-summary\">\n                    <span>Total execution time: ${totalExecutionTime.toFixed(0)}ms</span>\n                </div>\n            </div>\n            <div class=\"profiler-content\">\n                <div class=\"function-list\">\n                    ${getTopFunctions(reports).map(func => `\n                        <div class=\"function-item\">\n                            <div class=\"function-name\">${func.name}()</div>\n                            <div class=\"function-bar\">\n                                <div class=\"function-bar-fill\" style=\"width: ${(func.time / totalExecutionTime * 100)}%\"></div>\n                            </div>\n                            <div class=\"function-time\">${func.time.toFixed(0)}ms (${((func.time / totalExecutionTime) * 100).toFixed(1)}%)</div>\n                        </div>\n                    `).join('')}\n                </div>\n                <div class=\"function-chart\">\n                    <canvas id=\"functionChart\"></canvas>\n                </div>\n                <div class=\"profiler-stats\">\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${totalFunctions}</div>\n                        <div class=\"profiler-stat-label\">Functions</div>\n                    </div>\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${totalCalls}</div>\n                        <div class=\"profiler-stat-label\">Total Calls</div>\n                    </div>\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${getLongestFunction(reports).time.toFixed(0)}ms</div>\n                        <div class=\"profiler-stat-label\">Longest Function</div>\n                    </div>\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${((totalExecutionTime / (reports[0]?.performance?.loadTime || 1)) * 100).toFixed(1)}%</div>\n                        <div class=\"profiler-stat-label\">JS Time</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Creates network analysis for single scenario\n */\nfunction createScenarioNetworkAnalysis(report: WebVitalsReport): string {\n    const network = report.network;\n    if (!network || !network.requests.length) {\n        return `\n            <div class=\"network-analysis\">\n                <div class=\"section-header\">\n                    <h3>Network Request Analysis</h3>\n                </div>\n                <div class=\"network-content\">\n                    <p>No network data available</p>\n                </div>\n            </div>\n        `;\n    }\n    \n    return `\n        <div class=\"network-analysis\">\n            <div class=\"section-header\">\n                <h3>Network Request Analysis</h3>\n                <div class=\"section-summary\">\n                    <span>Total Requests: ${network.summary.totalRequests}</span>\n                    <span>Total Size: ${formatBytes(network.summary.totalTransferSize)}</span>\n                    <span>Load Time: ${network.summary.averageResponseTime.toFixed(0)}ms</span>\n                </div>\n            </div>\n            <div class=\"network-content\">\n                <div id=\"scenarioNetworkTable-${Date.now()}\"></div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Creates JavaScript profiler for single scenario\n */\nfunction createScenarioJavaScriptProfiler(report: WebVitalsReport): string {\n    const profile = report.profile;\n    if (!profile || !profile.summary) {\n        return `\n            <div class=\"js-profiler\">\n                <div class=\"section-header\">\n                    <h3>JavaScript Profiler</h3>\n                </div>\n                <div class=\"profiler-content\">\n                    <p>No profile data available</p>\n                </div>\n            </div>\n        `;\n    }\n    \n    return `\n        <div class=\"js-profiler\">\n            <div class=\"section-header\">\n                <h3>JavaScript Profiler</h3>\n                <div class=\"section-summary\">\n                    <span>Total execution time: ${profile.summary.totalExecutionTime.toFixed(0)}ms</span>\n                </div>\n            </div>\n            <div class=\"profiler-content\">\n                <div class=\"function-list\">\n                    ${getTopFunctionsForScenario(report).map(func => `\n                        <div class=\"function-item\">\n                            <div class=\"function-name\">${func.name}()</div>\n                            <div class=\"function-bar\">\n                                <div class=\"function-bar-fill\" style=\"width: ${(func.time / profile.summary.totalExecutionTime * 100)}%\"></div>\n                            </div>\n                            <div class=\"function-time\">${func.time.toFixed(0)}ms (${((func.time / profile.summary.totalExecutionTime) * 100).toFixed(1)}%)</div>\n                        </div>\n                    `).join('')}\n                </div>\n                <div class=\"function-chart\">\n                    <canvas data-chart-data='${JSON.stringify(getFunctionCallData(report))}'></canvas>\n                </div>\n                <div class=\"profiler-stats\">\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${profile.summary.totalFunctions}</div>\n                        <div class=\"profiler-stat-label\">Functions</div>\n                    </div>\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${profile.summary.totalCalls}</div>\n                        <div class=\"profiler-stat-label\">Total Calls</div>\n                    </div>\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${profile.summary.longestFunctionTime.toFixed(0)}ms</div>\n                        <div class=\"profiler-stat-label\">Longest Function</div>\n                    </div>\n                    <div class=\"profiler-stat\">\n                        <div class=\"profiler-stat-value\">${((profile.summary.totalExecutionTime / (report.performance?.loadTime || 1)) * 100).toFixed(1)}%</div>\n                        <div class=\"profiler-stat-label\">JS Time</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n}\n\n/**\n * Creates summary card\n */\nfunction createSummaryCard(label: string, value: string): string {\n    return `\n        <div class=\"summary-card\">\n            <div class=\"summary-value\">${value}</div>\n            <div class=\"summary-label\">${label}</div>\n        </div>\n    `;\n}\n\n/**\n * Helper functions for calculations\n */\nfunction calculateTotalSize(reports: WebVitalsReport[]): string {\n    const totalBytes = reports.reduce((sum, r) => sum + (r.network?.summary?.totalTransferSize || 0), 0);\n    return (totalBytes / (1024 * 1024)).toFixed(2);\n}\n\nfunction calculateAverageLoadTime(reports: WebVitalsReport[]): string {\n    const totalTime = reports.reduce((sum, r) => sum + (r.performance?.loadTime || 0), 0);\n    return (totalTime / reports.length).toFixed(0);\n}\n\nfunction calculateTotalRequests(reports: WebVitalsReport[]): number {\n    return reports.reduce((sum, r) => sum + (r.network?.summary?.totalRequests || 0), 0);\n}\n\nfunction calculateAverageJSExecution(reports: WebVitalsReport[]): string {\n    const totalTime = reports.reduce((sum, r) => sum + (r.profile?.summary?.totalExecutionTime || 0), 0);\n    return (totalTime / reports.length).toFixed(0);\n}\n\nfunction getTopNetworkRequests(reports: WebVitalsReport[]): any[] {\n    const allRequests: any[] = [];\n    reports.forEach(report => {\n        if (report.network?.requests) {\n            allRequests.push(...report.network.requests);\n        }\n    });\n    \n    return allRequests\n        .sort((a: any, b: any) => b.responseTime - a.responseTime)\n}\n\nfunction getTopFunctions(reports: WebVitalsReport[], limit: number = 5): any[] {\n    const allFunctions: any[] = [];\n    reports.forEach(report => {\n        if (report.profile?.summary?.topFunctions) {\n            allFunctions.push(...report.profile.summary.topFunctions);\n        }\n    });\n    \n    return allFunctions\n        .sort((a: any, b: any) => b.time - a.time)\n        .slice(0, limit);\n}\n\nfunction getTopFunctionsForScenario(report: WebVitalsReport, limit: number = 5): any[] {\n    if (!report.profile?.summary?.topFunctions) return [];\n    \n    return report.profile.summary.topFunctions\n        .sort((a: any, b: any) => b.time - a.time)\n        .slice(0, limit);\n}\n\nfunction getLongestFunction(reports: WebVitalsReport[]): any {\n    const allFunctions = getTopFunctions(reports, 1);\n    return allFunctions[0] || { name: 'N/A', time: 0 };\n}\n\nfunction getFunctionCallData(report: WebVitalsReport): Record<string, number> {\n    if (!report.profile?.summary?.functionCallFrequency) return {};\n    return report.profile.summary.functionCallFrequency;\n}\n\n/**\n * Creates detailed network request information\n */\nfunction createNetworkRequestDetails(request: any): string {\n    const timing = request.timing || {};\n    const headers = request.headers || {};\n    \n    return `\n        <div class=\"network-details\">\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Full URL</div>\n                <div class=\"detail-value\">${request.url}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Method</div>\n                <div class=\"detail-value\">${request.method || 'GET'}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Status Code</div>\n                <div class=\"detail-value\">${request.status || 'N/A'}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Domain</div>\n                <div class=\"detail-value\">${request.domain || 'N/A'}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Protocol</div>\n                <div class=\"detail-value\">${request.protocol || 'N/A'}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Cache Status</div>\n                <div class=\"detail-value\">${request.cacheStatus || 'N/A'}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Transfer Size</div>\n                <div class=\"detail-value\">${formatBytes(request.transferSize || 0)}</div>\n            </div>\n            <div class=\"detail-group\">\n                <div class=\"detail-label\">Encoded Size</div>\n                <div class=\"detail-value\">${formatBytes(request.encodedSize || 0)}</div>\n            </div>\n        </div>\n        \n        <div class=\"timing-breakdown\">\n            <h4 style=\"margin-bottom: 0.5rem; color: #374151; font-size: 0.875rem;\">Timing Breakdown</h4>\n            <div class=\"timing-item\">\n                <span class=\"timing-label\">DNS Lookup</span>\n                <span class=\"timing-value\">${(timing.dnsLookup || 0).toFixed(2)}ms</span>\n            </div>\n            <div class=\"timing-item\">\n                <span class=\"timing-label\">TCP Connect</span>\n                <span class=\"timing-value\">${(timing.tcpConnect || 0).toFixed(2)}ms</span>\n            </div>\n            <div class=\"timing-item\">\n                <span class=\"timing-label\">SSL Handshake</span>\n                <span class=\"timing-value\">${(timing.sslHandshake || 0).toFixed(2)}ms</span>\n            </div>\n            <div class=\"timing-item\">\n                <span class=\"timing-label\">Request Send</span>\n                <span class=\"timing-value\">${(timing.requestSend || 0).toFixed(2)}ms</span>\n            </div>\n            <div class=\"timing-item\">\n                <span class=\"timing-label\">Wait Time</span>\n                <span class=\"timing-value\">${(timing.waitTime || 0).toFixed(2)}ms</span>\n            </div>\n            <div class=\"timing-item\">\n                <span class=\"timing-label\">Response Receive</span>\n                <span class=\"timing-value\">${(timing.responseReceive || 0).toFixed(2)}ms</span>\n            </div>\n            <div class=\"timing-item\" style=\"border-top: 2px solid #e2e8f0; margin-top: 0.5rem; padding-top: 0.5rem;\">\n                <span class=\"timing-label\" style=\"font-weight: 600;\">Total Time</span>\n                <span class=\"timing-value\" style=\"font-weight: 700;\">${(request.responseTime || 0).toFixed(2)}ms</span>\n            </div>\n        </div>\n        \n        ${Object.keys(headers).length > 0 ? `\n            <div class=\"timing-breakdown\" style=\"margin-top: 1rem;\">\n                <h4 style=\"margin-bottom: 0.5rem; color: #374151; font-size: 0.875rem;\">Request Headers</h4>\n                ${Object.entries(headers).map(([key, value]) => `\n                    <div class=\"timing-item\">\n                        <span class=\"timing-label\">${key}</span>\n                        <span class=\"timing-value\" style=\"font-size: 0.75rem;\">${value}</span>\n                    </div>\n                `).join('')}\n            </div>\n        ` : ''}\n    `;\n}\n\n/**\n * Formats bytes to human readable format\n */\nfunction formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    \n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n","import type { Page } from 'playwright';\nimport type { WebVitalsReport, NetworkRequest, NetworkSummary } from '../types';\n\n/**\n * Install Web Vitals collectors at the earliest script time.\n * Call BEFORE navigation to capture FCP/LCP from the initial load.\n */\nexport async function startVitalsObservation(\n  page: Page,\n  options?: { usePerformanceObserver?: boolean }\n): Promise<void> {\n  const useObserver = options?.usePerformanceObserver ?? true;\n\n  // For web-vitals package, we'll load it after navigation but before steps\n  if (!useObserver) {\n    // Just initialize the results object for now\n    const initScript = `\n      (function(){\n        if (window.__wvg && window.__wvg.started) return;\n        window.__wvg = { started: true, results: {}, packageLoaded: false };\n      })();\n    `;\n    await page.addInitScript({ content: initScript });\n    return;\n  }\n\n  const initScript = `\n    (function(){\n      if (window.__wvg && window.__wvg.started) return;\n      window.__wvg = { started: true, results: {}, observers: [] };\n      try {\n        // FCP\n        try {\n          const fcpObs = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const fcp = entries.find(e => e.name === 'first-contentful-paint');\n            if (fcp) { window.__wvg.results.FCP = fcp.startTime; }\n          });\n          fcpObs.observe({ entryTypes: ['paint'] });\n          window.__wvg.observers.push(fcpObs);\n        } catch {}\n\n        // LCP\n        try {\n          const lcpObs = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const last = entries[entries.length - 1];\n            if (last) { window.__wvg.results.LCP = last.startTime; }\n          });\n          lcpObs.observe({ entryTypes: ['largest-contentful-paint'] });\n          window.__wvg.observers.push(lcpObs);\n        } catch {}\n\n        // CLS\n        try {\n          let cls = 0;\n          const clsObs = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!entry.hadRecentInput) { cls += (entry).value || 0; }\n            }\n            window.__wvg.results.CLS = cls;\n          });\n          clsObs.observe({ entryTypes: ['layout-shift'] });\n          window.__wvg.observers.push(clsObs);\n        } catch {}\n\n        // INP (simplified event delay aggregation)\n        try {\n          let maxDelay = 0;\n          const inpObs = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              const ps = (entry).processingStart;\n              const st = entry.startTime;\n              if (ps && st) { maxDelay = Math.max(maxDelay, ps - st); }\n            }\n            window.__wvg.results.INP = maxDelay;\n          });\n          inpObs.observe({ entryTypes: ['event'] });\n          window.__wvg.observers.push(inpObs);\n        } catch {}\n      } catch {}\n    })();\n  `;\n  await page.addInitScript({ content: initScript });\n}\n\n/**\n * Load web-vitals package and register metrics (for package approach)\n * Call AFTER navigation but BEFORE scenario steps\n */\nexport async function loadWebVitalsPackage(page: Page): Promise<void> {\n  try {\n    // Load the web-vitals package\n    await page.addScriptTag({\n      url: 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.iife.js'\n    });\n    \n    // Wait a moment for the script to load\n    await page.waitForTimeout(1000);\n    \n    // Register all metrics\n    await page.evaluate(() => {\n      if ((window as any)['webVitals'] && (window as any).__wvg) {\n        const wv = (window as any)['webVitals'];\n        (window as any).__wvg.packageLoaded = true;\n        \n        // Register all metrics\n        wv.onFCP((metric: any) => { \n          (window as any).__wvg.results.FCP = metric.value; \n          console.log('FCP measured (web-vitals package):', metric.value);\n        });\n        wv.onLCP((metric: any) => { \n          (window as any).__wvg.results.LCP = metric.value; \n          console.log('LCP measured (web-vitals package):', metric.value);\n        });\n        wv.onCLS((metric: any) => { \n          (window as any).__wvg.results.CLS = metric.value; \n          console.log('CLS measured (web-vitals package):', metric.value);\n        });\n        wv.onINP((metric: any) => { \n          (window as any).__wvg.results.INP = metric.value; \n          console.log('INP measured (web-vitals package):', metric.value);\n        });\n      }\n    });\n    \n    console.log('✅ Web-vitals package loaded and metrics registered');\n  } catch (error) {\n    console.warn('⚠️  Failed to load web-vitals package:', error);\n  }\n}\n\n/**\n * Disconnect observers and collect measured metrics.\n * Call AFTER scenario steps and a short settle delay.\n */\nexport async function collectVitals(page: Page): Promise<WebVitalsReport['metrics']> {\n  const results = await page.evaluate(() => {\n    const out: any = (window as any).__wvg?.results ? { ...(window as any).__wvg.results } : {};\n    \n    // Add TTFB from Navigation Timing API\n    try {\n      const nav = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      if (nav) {\n        out.TTFB = nav.responseStart - nav.requestStart;\n      }\n    } catch {}\n    \n    // Cleanup observers (for PerformanceObserver approach)\n    try {\n      if ((window as any).__wvg?.observers) {\n        for (const obs of (window as any).__wvg.observers) { \n          try { obs.disconnect(); } catch {} \n        }\n      }\n    } catch {}\n    \n    // Reset state\n    try {\n      if ((window as any).__wvg) {\n        (window as any).__wvg.started = false;\n      }\n    } catch {}\n    \n    return out;\n  });\n  return results as WebVitalsReport['metrics'];\n}\n\n/**\n * Measures Web Vitals metrics using PerformanceObserver (no external dependencies)\n * @param page - Playwright page instance\n * @returns Promise resolving to Web Vitals metrics\n */\nexport async function measureWebVitalsWithObserver(page: Page): Promise<WebVitalsReport['metrics']> {\n  const metrics: WebVitalsReport['metrics'] = {};\n  \n  try {\n    const results = await page.evaluate(() => {\n      return new Promise<WebVitalsReport['metrics']>((resolve) => {\n        const results: WebVitalsReport['metrics'] = {};\n        let resolved = false;\n        \n        // Timeout after 10 seconds to prevent hanging\n        const timeout = setTimeout(() => {\n          if (!resolved) {\n            resolved = true;\n            resolve(results);\n          }\n        }, 10000);\n        \n        // Helper function to resolve once\n        const resolveOnce = (value: WebVitalsReport['metrics']) => {\n          if (!resolved) {\n            resolved = true;\n            clearTimeout(timeout);\n            resolve(value);\n          }\n        };\n        \n        // Track metrics collected\n        let metricsCollected = 0;\n        const totalMetrics = 4; // FCP, LCP, CLS, INP\n        \n        const checkComplete = () => {\n          metricsCollected++;\n          if (metricsCollected >= totalMetrics && !resolved) {\n            resolveOnce(results);\n          }\n        };\n        \n        // 1. First Contentful Paint (FCP)\n        try {\n          const fcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');\n            if (fcpEntry) {\n              results.FCP = fcpEntry.startTime;\n              console.log('FCP measured (PerformanceObserver):', fcpEntry.startTime);\n              fcpObserver.disconnect();\n              checkComplete();\n            }\n          });\n          fcpObserver.observe({ entryTypes: ['paint'] });\n        } catch (e) {\n          console.warn('FCP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 2. Largest Contentful Paint (LCP)\n        try {\n          const lcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const lastEntry = entries[entries.length - 1];\n            if (lastEntry) {\n              results.LCP = lastEntry.startTime;\n              console.log('LCP measured (PerformanceObserver):', lastEntry.startTime);\n            }\n          });\n          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          \n          // LCP can change, so we wait a bit before finalizing\n          setTimeout(() => {\n            lcpObserver.disconnect();\n            checkComplete();\n          }, 2000);\n        } catch (e) {\n          console.warn('LCP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 3. Cumulative Layout Shift (CLS)\n        try {\n          let clsValue = 0;\n          const clsObserver = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!(entry as any).hadRecentInput) {\n                clsValue += (entry as any).value;\n              }\n            }\n            results.CLS = clsValue;\n            console.log('CLS measured (PerformanceObserver):', clsValue);\n          });\n          clsObserver.observe({ entryTypes: ['layout-shift'] });\n          \n          // CLS measurement continues until page unload, so we wait\n          setTimeout(() => {\n            clsObserver.disconnect();\n            checkComplete();\n          }, 3000);\n        } catch (e) {\n          console.warn('CLS PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 4. Interaction to Next Paint (INP) - simplified version\n        try {\n          let maxInteractionDelay = 0;\n          const inpObserver = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              const processingStart = (entry as any).processingStart;\n              const startTime = entry.startTime;\n              if (processingStart && startTime) {\n                const delay = processingStart - startTime;\n                maxInteractionDelay = Math.max(maxInteractionDelay, delay);\n              }\n            }\n            results.INP = maxInteractionDelay;\n            console.log('INP measured (PerformanceObserver):', maxInteractionDelay);\n          });\n          inpObserver.observe({ entryTypes: ['event'] });\n          \n          // Wait for interactions to settle\n          setTimeout(() => {\n            inpObserver.disconnect();\n            checkComplete();\n          }, 2000);\n        } catch (e) {\n          console.warn('INP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 5. Time to First Byte (TTFB) - using Navigation Timing\n        try {\n          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n          if (navigation) {\n            results.TTFB = navigation.responseStart - navigation.requestStart;\n            console.log('TTFB measured (PerformanceObserver):', results.TTFB);\n          }\n        } catch (e) {\n          console.warn('TTFB measurement failed:', e);\n          // TTFB is optional, don't fail if not available\n        }\n      });\n    });\n    \n    // Merge results\n    Object.assign(metrics, results);\n    \n  } catch (error) {\n    console.warn('Warning: Could not measure Web Vitals with PerformanceObserver:', error);\n  }\n  \n  return metrics;\n}\n\n/**\n * Measures Web Vitals metrics on a page with CSP-safe fallback\n * @param page - Playwright page instance\n * @param options - Configuration options for Web Vitals measurement\n * @returns Promise resolving to Web Vitals metrics\n */\nexport async function measureWebVitals(\n  page: Page, \n  options?: { usePerformanceObserver?: boolean }\n): Promise<WebVitalsReport['metrics']> {\n  const useObserver = options?.usePerformanceObserver ?? true; // Default to PerformanceObserver\n  \n  // Use PerformanceObserver by default (was working fine previously)\n  if (useObserver) {\n    console.log('🔍 Measuring Web Vitals with PerformanceObserver...');\n    return measureWebVitalsWithObserver(page);\n  } else {\n    try {\n      console.log('📦 Measuring Web Vitals with web-vitals package...');\n      return measureWebVitalsWithPackage(page);\n    } catch (error) {\n      console.warn('⚠️  web-vitals package failed, falling back to PerformanceObserver');\n      return measureWebVitalsWithObserver(page);\n    }\n  }\n  return {};\n}\n\n/**\n * Original web-vitals package implementation (for fallback)\n */\nasync function measureWebVitalsWithPackage(page: Page): Promise<WebVitalsReport['metrics']> {\n  const metrics: WebVitalsReport['metrics'] = {};\n  \n  try {\n    // Inject Web Vitals measurement script\n    await page.addScriptTag({\n      url: 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.iife.js'\n    });\n    \n    // Wait a moment for the script to load\n    await page.waitForTimeout(1000);\n    \n    // Measure all Web Vitals metrics together with proper timing\n    const allMetrics = await page.evaluate(() => {\n      return new Promise<WebVitalsReport['metrics']>((resolve) => {\n        const results: WebVitalsReport['metrics'] = {};\n        let metricsCollected = 0;\n        const totalMetrics = 4; // FCP, LCP, CLS, INP\n        \n        // Timeout after 15 seconds\n        const timeout = setTimeout(() => {\n          resolve(results);\n        }, 15000);\n        \n        const checkComplete = () => {\n          metricsCollected++;\n          if (metricsCollected >= totalMetrics) {\n            clearTimeout(timeout);\n            resolve(results);\n          }\n        };\n        \n        // Check if web-vitals is available\n        if (!('webVitals' in window)) {\n          console.warn('webVitals library not loaded');\n          clearTimeout(timeout);\n          resolve(results);\n          return;\n        }\n        \n        const webVitals = (window as any)['webVitals'];\n        \n        // Measure FCP (First Contentful Paint)\n        try {\n          webVitals.onFCP((metric: any) => {\n            results.FCP = metric.value;\n            console.log('FCP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('FCP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure LCP (Largest Contentful Paint)\n        try {\n          webVitals.onLCP((metric: any) => {\n            results.LCP = metric.value;\n            console.log('LCP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('LCP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure CLS (Cumulative Layout Shift)\n        try {\n          webVitals.onCLS((metric: any) => {\n            results.CLS = metric.value;\n            console.log('CLS measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('CLS measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure INP (Interaction to Next Paint)\n        try {\n          webVitals.onINP((metric: any) => {\n            results.INP = metric.value;\n            console.log('INP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('INP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure TTFB (Time to First Byte) using Performance API\n        try {\n          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n          if (navigation) {\n            results.TTFB = navigation.responseStart - navigation.requestStart;\n            console.log('TTFB measured:', results.TTFB);\n          }\n        } catch (e) {\n          console.warn('TTFB measurement failed:', e);\n        }\n      });\n    });\n    \n    // Merge results\n    Object.assign(metrics, allMetrics);\n    \n    console.log('✅ Successfully measured Web Vitals with web-vitals package:', metrics);\n    \n  } catch (error) {\n    console.warn('Warning: Could not measure some Web Vitals with package:', error);\n    throw error; // Re-throw to trigger fallback\n  }\n  \n  return metrics;\n}\n\n/**\n * Measures additional performance metrics using the Performance API\n * @param page - Playwright page instance\n * @returns Promise resolving to performance metrics\n */\nexport async function measurePerformanceMetrics(page: Page): Promise<WebVitalsReport['performance']> {\n  const performanceMetrics = await page.evaluate((): WebVitalsReport['performance'] => {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint') as PerformanceEntry[];\n    \n    return {\n      loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n      firstPaint: paint.find((entry: PerformanceEntry) => entry.name === 'first-paint')?.startTime || 0\n    };\n  });\n  \n  return performanceMetrics;\n}\n\n\n\n/**\n * Measures network requests using the Performance API\n * @param page - Playwright page instance\n * @returns Promise resolving to network request data\n */\nexport async function measureNetworkRequests(page: Page, cdpSession?: any): Promise<WebVitalsReport['network']> {\n  // Use CDP Network domain for comprehensive network analysis\n  if (!cdpSession) {\n    // Fallback to Performance API if no CDP session provided\n    return await measureNetworkRequestsFallback(page);\n  }\n  \n  // Wait for page to load completely\n  await page.waitForLoadState('networkidle');\n  \n  // Get the collected network data from the CDP session\n  const networkRequests = (cdpSession as any).networkRequests;\n  const networkResponses = (cdpSession as any).networkResponses;\n  const loadingFinished = (cdpSession as any).loadingFinished;\n  \n  // Process collected network data\n  const requests: NetworkRequest[] = [];\n  \n  for (const [requestId, request] of networkRequests) {\n    const response = networkResponses.get(requestId);\n    const finished = loadingFinished.get(requestId);\n    \n    if (response) {\n      const url = new URL(request.url);\n      const domain = url.hostname;\n      const protocol = url.protocol.replace(':', '');\n      \n      // Calculate timing from CDP data\n      const timing = response.timing || {};\n      \n      // CDP timing values are in milliseconds relative to the request start\n      // Use the actual wall clock time for total response time\n      const responseTime = finished?.timestamp ? \n        (finished.timestamp - request.timestamp) * 1000 : \n        (timing.receiveHeadersEnd || 0);\n      \n      // Calculate the sum of all timing components for verification\n      const dnsLookup = Math.max(0, (timing.dnsEnd || 0) - (timing.dnsStart || 0));\n      const tcpConnect = Math.max(0, (timing.connectEnd || 0) - (timing.connectStart || 0));\n      const sslHandshake = Math.max(0, (timing.sslEnd || 0) - (timing.sslStart || 0));\n      const requestSend = Math.max(0, (timing.sendEnd || 0) - (timing.sendStart || 0));\n      const waitTime = Math.max(0, (timing.receiveHeadersEnd || 0) - (timing.sendEnd || 0));\n      const responseReceive = Math.max(0, (timing.receiveHeadersEnd || 0) - (timing.receiveHeadersStart || 0));\n      const redirectTime = Math.max(0, (timing.redirectEnd || 0) - (timing.redirectStart || 0));\n      \n      // Calculate content download time (time from headers received to response finished)\n      const contentDownloadTime = finished?.timestamp ? \n        Math.max(0, (finished.timestamp - request.timestamp) * 1000 - (timing.receiveHeadersEnd || 0)) : 0;\n      \n      // The sum of timing components should match the total time\n      const timingSum = dnsLookup + tcpConnect + sslHandshake + requestSend + waitTime + responseReceive + redirectTime + contentDownloadTime;\n      \n      requests.push({\n        url: request.url,\n        method: request.method,\n        status: response.status,\n        statusText: response.statusText,\n        responseTime: responseTime,\n        transferSize: finished?.encodedDataLength || 0,\n        encodedBodySize: response.encodedDataLength || 0,\n        decodedBodySize: response.encodedDataLength || 0, // CDP doesn't provide decoded size\n        startTime: request.timestamp || 0,\n        endTime: finished?.timestamp || request.timestamp,\n        duration: responseTime,\n        resourceType: request.type || 'other',\n        fromCache: response.fromDiskCache || response.fromPrefetchCache || false,\n        protocol,\n        domain,\n        // Enhanced timing from CDP\n        timing: {\n          dnsLookup: dnsLookup,\n          tcpConnect: tcpConnect,\n          sslHandshake: sslHandshake,\n          requestSend: requestSend,\n          waitTime: waitTime,\n          responseReceive: responseReceive,\n          redirectTime: redirectTime,\n          contentDownloadTime: contentDownloadTime, // Time to download response body\n          totalTime: responseTime, // Use the actual wall clock time\n          timingSum: timingSum, // Sum of all timing components\n          fromCache: response.fromDiskCache || response.fromPrefetchCache || false,\n          connectionReused: response.connectionReused || false\n        },\n        // Additional CDP data\n        headers: {\n          request: request.headers,\n          response: response.headers\n        },\n        security: {\n          state: response.securityState,\n          details: response.securityDetails\n        },\n        connection: {\n          id: response.connectionId,\n          remoteIP: response.remoteIPAddress,\n          remotePort: response.remotePort,\n          reused: response.connectionReused\n        },\n        initiator: request.initiator,\n        redirectChain: request.redirectResponse ? [request.redirectResponse] : []\n      });\n    }\n  }\n  \n  // Calculate summary statistics\n  const summary: NetworkSummary = {\n    totalRequests: requests.length,\n    totalTransferSize: requests.reduce((sum, req) => sum + req.transferSize, 0),\n    totalEncodedSize: requests.reduce((sum, req) => sum + req.encodedBodySize, 0),\n    totalDecodedSize: requests.reduce((sum, req) => sum + req.decodedBodySize, 0),\n    averageResponseTime: requests.length > 0 \n      ? requests.reduce((sum, req) => sum + req.responseTime, 0) / requests.length \n      : 0,\n    slowestRequest: requests.length > 0 \n      ? requests.reduce((slowest, req) => req.responseTime > slowest.responseTime ? req : slowest)\n      : null,\n    failedRequests: requests.filter(req => req.status >= 400).length,\n    requestsByType: {},\n    requestsByDomain: {}\n  };\n\n  // Count requests by type and domain\n  requests.forEach(req => {\n    summary.requestsByType[req.resourceType] = (summary.requestsByType[req.resourceType] || 0) + 1;\n    summary.requestsByDomain[req.domain] = (summary.requestsByDomain[req.domain] || 0) + 1;\n  });\n\n  // CDP session cleanup is handled by the caller\n\n  return {\n    requests,\n    summary\n  };\n}\n\n// Fallback function using Performance API\nasync function measureNetworkRequestsFallback(page: Page): Promise<WebVitalsReport['network']> {\n  const performanceData = await page.evaluate((): WebVitalsReport['network'] => {\n\n    /**\n * Helper function to determine resource type from URL\n */\nfunction getResourceType(url: string): string {\n  const extension = url.split('.').pop()?.toLowerCase();\n  const pathname = new URL(url).pathname.toLowerCase();\n  \n  if (pathname.includes('/api/') || pathname.includes('/graphql')) {\n    return 'api';\n  }\n  \n  switch (extension) {\n    case 'js':\n      return 'script';\n    case 'css':\n      return 'stylesheet';\n    case 'png':\n    case 'jpg':\n    case 'jpeg':\n    case 'gif':\n    case 'svg':\n    case 'webp':\n    case 'ico':\n      return 'image';\n    case 'woff':\n    case 'woff2':\n    case 'ttf':\n    case 'otf':\n      return 'font';\n    case 'mp4':\n    case 'webm':\n    case 'ogg':\n      return 'media';\n    case 'json':\n      return 'json';\n    case 'xml':\n      return 'xml';\n    default:\n      return 'other';\n  }\n}\n\n    const entries = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n    \n    const requests: NetworkRequest[] = entries.map(entry => {\n      const url = new URL(entry.name);\n      const domain = url.hostname;\n      const protocol = url.protocol.replace(':', '');\n      \n      return {\n        url: entry.name,\n        method: 'GET', // Performance API doesn't provide method, defaulting to GET\n        status: 200, // Performance API doesn't provide status, defaulting to 200\n        statusText: 'OK',\n        responseTime: entry.responseEnd - entry.responseStart,\n        transferSize: entry.transferSize || 0,\n        encodedBodySize: entry.encodedBodySize || 0,\n        decodedBodySize: entry.decodedBodySize || 0,\n        startTime: entry.startTime,\n        endTime: entry.responseEnd,\n        duration: entry.duration,\n        resourceType: getResourceType(entry.name),\n        fromCache: entry.transferSize === 0 && entry.encodedBodySize > 0,\n        protocol,\n        domain,\n        timing: {\n          dnsLookup: Math.max(0, entry.domainLookupEnd - entry.domainLookupStart),\n          tcpConnect: Math.max(0, entry.connectEnd - entry.connectStart),\n          sslHandshake: entry.secureConnectionStart > 0 ? Math.max(0, entry.connectEnd - entry.secureConnectionStart) : 0,\n          requestSend: Math.max(0, entry.responseStart - entry.requestStart),\n          waitTime: Math.max(0, entry.responseStart - entry.requestStart),\n          responseReceive: Math.max(0, entry.responseEnd - entry.responseStart),\n          // Additional timing data\n          redirectTime: Math.max(0, entry.redirectEnd - entry.redirectStart),\n          contentDownloadTime: Math.max(0, entry.responseEnd - entry.responseStart), // Performance API doesn't distinguish this\n          totalTime: Math.max(0, entry.responseEnd - entry.startTime),\n          timingSum: Math.max(0, entry.responseEnd - entry.startTime), // Same as totalTime for Performance API\n          // Cache timing\n          fromCache: entry.transferSize === 0 && entry.encodedBodySize > 0,\n          // Connection reuse\n          connectionReused: entry.connectStart === 0 && entry.connectEnd === 0\n        }\n      };\n    });\n\n    // Calculate summary statistics\n    const summary: NetworkSummary = {\n      totalRequests: requests.length,\n      totalTransferSize: requests.reduce((sum, req) => sum + req.transferSize, 0),\n      totalEncodedSize: requests.reduce((sum, req) => sum + req.encodedBodySize, 0),\n      totalDecodedSize: requests.reduce((sum, req) => sum + req.decodedBodySize, 0),\n      averageResponseTime: requests.length > 0 \n        ? requests.reduce((sum, req) => sum + req.responseTime, 0) / requests.length \n        : 0,\n      slowestRequest: requests.length > 0 \n        ? requests.reduce((slowest, req) => req.responseTime > slowest.responseTime ? req : slowest)\n        : null,\n      failedRequests: requests.filter(req => req.status >= 400).length,\n      requestsByType: {},\n      requestsByDomain: {}\n    };\n\n    // Count requests by type and domain\n    requests.forEach(req => {\n      summary.requestsByType[req.resourceType] = (summary.requestsByType[req.resourceType] || 0) + 1;\n      summary.requestsByDomain[req.domain] = (summary.requestsByDomain[req.domain] || 0) + 1;\n    });\n\n    return {\n      requests,\n      summary\n    };\n  });\n\n  return performanceData;\n}\n\n// Set up CDP network monitoring before navigation\nexport async function setupCDPNetworkMonitoring(page: Page): Promise<any> {\n  try {\n    const cdpSession = await page.context().newCDPSession(page);\n    await cdpSession.send('Network.enable');\n    \n    // Store network requests and responses\n    const networkRequests = new Map();\n    const networkResponses = new Map();\n    const loadingFinished = new Map();\n    \n    // Listen to network events\n    cdpSession.on('Network.requestWillBeSent', (params: any) => {\n      const requestId = params.requestId;\n      networkRequests.set(requestId, {\n        requestId,\n        url: params.request.url,\n        method: params.request.method,\n        headers: params.request.headers,\n        postData: params.request.postData,\n        timestamp: params.timestamp,\n        wallTime: params.wallTime,\n        initiator: params.initiator,\n        redirectResponse: params.redirectResponse,\n        type: params.type,\n        frameId: params.frameId,\n        hasUserGesture: params.hasUserGesture,\n        documentURL: params.documentURL,\n        loaderId: params.loaderId\n      });\n    });\n    \n    cdpSession.on('Network.responseReceived', (params: any) => {\n      const requestId = params.requestId;\n      networkResponses.set(requestId, {\n        requestId,\n        url: params.response.url,\n        status: params.response.status,\n        statusText: params.response.statusText,\n        headers: params.response.headers,\n        mimeType: params.response.mimeType,\n        connectionReused: params.response.connectionReused,\n        connectionId: params.response.connectionId,\n        remoteIPAddress: params.response.remoteIPAddress,\n        remotePort: params.response.remotePort,\n        fromDiskCache: params.response.fromDiskCache,\n        fromServiceWorker: params.response.fromServiceWorker,\n        fromPrefetchCache: params.response.fromPrefetchCache,\n        encodedDataLength: params.response.encodedDataLength,\n        timing: params.response.timing,\n        responseTime: params.timestamp,\n        protocol: params.response.protocol,\n        securityState: params.response.securityState,\n        securityDetails: params.response.securityDetails\n      });\n    });\n    \n    cdpSession.on('Network.loadingFinished', (params: any) => {\n      const requestId = params.requestId;\n      loadingFinished.set(requestId, {\n        requestId,\n        timestamp: params.timestamp,\n        encodedDataLength: params.encodedDataLength,\n        shouldReportCorbBlocking: false\n      });\n    });\n    \n    // Store the data maps on the session for later retrieval\n    (cdpSession as any).networkRequests = networkRequests;\n    (cdpSession as any).networkResponses = networkResponses;\n    (cdpSession as any).loadingFinished = loadingFinished;\n    \n    return cdpSession;\n  } catch (error) {\n    console.warn('⚠️  Failed to set up CDP network monitoring:', error);\n    return null;\n  }\n}\n\n// Enhanced main function with error handling\nexport async function measureNetworkRequestsEnhanced(page: Page, cdpSession?: any): Promise<WebVitalsReport['network']> {\n  try {\n    // Try CDP first for comprehensive data\n    return await measureNetworkRequests(page, cdpSession);\n  } catch (error) {\n    console.warn('⚠️  CDP Network analysis failed, falling back to Performance API:', error);\n    return await measureNetworkRequestsFallback(page);\n  }\n}\n","// helper/profile-js.ts\nimport type { Page } from '@playwright/test';\n\nexport async function profileJs<T>(page: Page, run: () => Promise<T>) {\n  const cdp = await page.context().newCDPSession(page);\n  await cdp.send('Profiler.enable');\n  await cdp.send('Profiler.start');           // sampling profiler\n  let error;\n  try { await run(); } catch (e) { error = e; }\n  const { profile } = await cdp.send('Profiler.stop');\n  await cdp.send('Profiler.disable');\n  return { profile, error };\n}\n","import type { Browser, Page } from 'playwright';\nimport type { ScenarioStep, ScenarioFile, WebVitalsReport, GuardianConfig } from '../types';\nimport { measureWebVitals, measurePerformanceMetrics, measureNetworkRequestsEnhanced, setupCDPNetworkMonitoring, startVitalsObservation, collectVitals, loadWebVitalsPackage } from '../measurements/webVitals';\nimport { profileJs } from '../measurements/performanceObserver';\n\n/**\n * Executes a single scenario step\n * @param page - Playwright page instance\n * @param step - Scenario step to execute\n * @throws Error if step execution fails\n */\nexport async function executeScenarioStep(page: Page, step: ScenarioStep): Promise<void> {\n  const timeout = step.timeout || 30000;\n  \n  switch (step.type) {\n    case 'navigate':\n      if (!step.url) {\n        throw new Error('Navigate step requires a URL');\n      }\n      await page.goto(step.url, { waitUntil: 'networkidle', timeout });\n      break;\n      \n    case 'click':\n      if (!step.selector) {\n        throw new Error('Click step requires a selector');\n      }\n      await page.click(step.selector, { timeout });\n      break;\n      \n    case 'type':\n      if (!step.selector || !step.text) {\n        throw new Error('Type step requires a selector and text');\n      }\n      await page.fill(step.selector, step.text, { timeout });\n      break;\n      \n    case 'wait':\n      if (step.waitFor) {\n        await page.waitForSelector(step.waitFor, { timeout });\n      } else {\n        await page.waitForTimeout(step.timeout || 1000);\n      }\n      break;\n      \n    case 'scroll':\n      await page.evaluate(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      });\n      break;\n      \n    case 'hover':\n      if (!step.selector) {\n        throw new Error('Hover step requires a selector');\n      }\n      await page.hover(step.selector, { timeout });\n      break;\n      \n    default:\n      throw new Error(`Unknown step type: ${step.type}`);\n  }\n}\n\nasync function runProfile(page: Page, scenario: ScenarioFile): Promise<void> {\n    for (const step of scenario.steps) {\n      await executeScenarioStep(page, step);\n    }\n}\n\n/**\n * Runs a complete scenario and measures Web Vitals\n * @param browser - Playwright browser instance\n * @param scenario - Scenario configuration\n * @param config - Guardian configuration (for Web Vitals options)\n * @returns Promise resolving to Web Vitals report\n */\nexport async function runScenario(browser: Browser, scenario: ScenarioFile, config?: GuardianConfig): Promise<WebVitalsReport> {\n  \n  const context = await browser.newContext({bypassCSP: true});\n  const page = await context.newPage();\n  \n  try {\n    // Navigate to the initial URL\n    \n    \n    // Start Web Vitals observation BEFORE navigation\n    await startVitalsObservation(page, config?.webVitals);\n    \n    // Set up CDP network monitoring before navigation\n    const cdpSession = await setupCDPNetworkMonitoring(page);\n    \n    // Navigate to the initial URL\n    await page.goto(scenario.url, { waitUntil: 'networkidle' });\n    \n    // Load web-vitals package if needed (after navigation, before steps)\n    if (config?.webVitals?.usePerformanceObserver === false) {\n      await loadWebVitalsPackage(page);\n    }\n    let profileResponse = null;\n    if (config?.enableProfile) {\n      profileResponse = await profileJs(page, () => runProfile(page, scenario));\n    } else {\n      await runProfile(page, scenario);\n    }\n\n    \n    // Wait a bit for any final interactions to settle\n    await page.waitForTimeout(2000);\n    \n    const webVitals = await collectVitals(page);\n    const performance = await measurePerformanceMetrics(page);\n    const network = await measureNetworkRequestsEnhanced(page, cdpSession);\n\n    // Generate report\n    const report: WebVitalsReport = {\n      scenario: scenario.name,\n      url: scenario.url,\n      timestamp: new Date().toISOString(),\n      metrics: webVitals,\n      performance,\n      network,\n      profile: profileResponse?.profile || null,\n    };\n    \n    // Clean up CDP session\n    if (cdpSession) {\n      try {\n        await cdpSession.detach();\n      } catch (error) {\n        console.warn('⚠️  Error detaching CDP session:', error);\n      }\n    }\n    \n    return report;\n    \n  } finally {\n    await page.close();\n  }\n}\n","import type { WebVitalsReport, GuardianConfig } from '../types';\n\n/**\n * Checks if Web Vitals metrics violate performance budgets\n * @param report - Web Vitals report to check\n * @param budgets - Performance budgets to validate against\n * @returns Array of budget violation messages\n */\nexport function checkBudgetViolations(report: WebVitalsReport, budgets: GuardianConfig['budgets']): string[] {\n  const violations: string[] = [];\n  \n  if (!budgets) return violations;\n  \n  const { metrics } = report;\n  \n  if (budgets.FCP && metrics.FCP && metrics.FCP > budgets.FCP) {\n    violations.push(`FCP: ${metrics.FCP}ms > ${budgets.FCP}ms`);\n  }\n  \n  if (budgets.LCP && metrics.LCP && metrics.LCP > budgets.LCP) {\n    violations.push(`LCP: ${metrics.LCP}ms > ${budgets.LCP}ms`);\n  }\n  \n  if (budgets.FID && metrics.FID && metrics.FID > budgets.FID) {\n    violations.push(`FID: ${metrics.FID}ms > ${budgets.FID}ms`);\n  }\n  \n  if (budgets.CLS && metrics.CLS && metrics.CLS > budgets.CLS) {\n    violations.push(`CLS: ${metrics.CLS} > ${budgets.CLS}`);\n  }\n  \n  if (budgets.INP && metrics.INP && metrics.INP > budgets.INP) {\n    violations.push(`INP: ${metrics.INP}ms > ${budgets.INP}ms`);\n  }\n  \n  if (budgets.TTFB && metrics.TTFB && metrics.TTFB > budgets.TTFB) {\n    violations.push(`TTFB: ${metrics.TTFB}ms > ${budgets.TTFB}ms`);\n  }\n  \n  return violations;\n}\n","import { chromium } from 'playwright';\nimport type { GuardianConfig, GuardianResult } from '../types';\nimport { findScenarioFiles, loadScenarioFile } from '../utils/fileUtils';\nimport { runScenario } from '../scenarios/runner';\nimport { checkBudgetViolations } from './budgetChecker';\nimport { generateHTMLReport } from '../utils/reportGenerator';\n\n/**\n * Main function that runs all scenarios and generates Web Vitals reports\n * @param config - Guardian configuration\n * @returns Promise resolving to execution results and summary\n */\nexport async function runWebVitalsGuardian(config: GuardianConfig): Promise<GuardianResult> {\n  const browser = await chromium.launch({ \n    headless: config.headless !== false \n  });\n  \n  try {\n    // Find all scenario files\n    const scenarioFiles = findScenarioFiles(config.scenariosPath);\n    \n    if (scenarioFiles.length === 0) {\n      throw new Error(`No *.scenario.json files found in ${config.scenariosPath}`);\n    }\n    \n    console.log(`Found ${scenarioFiles.length} scenario files`);\n    \n    const reports: GuardianResult['reports'] = [];\n    const budgetViolations: string[] = [];\n    \n    // Run each scenario\n    for (const filePath of scenarioFiles) {\n      try {\n        console.log(`Running scenario: ${filePath}`);\n        const scenario = loadScenarioFile(filePath, config.variables);\n        const report = await runScenario(browser, scenario, config);\n        reports.push(report);\n        \n        // Check against budgets\n        const budgets = { ...config.budgets, ...scenario.webVitals?.budgets };\n        const violations = checkBudgetViolations(report, budgets);\n        if (violations.length > 0) {\n          budgetViolations.push(`${scenario.name}: ${violations.join(', ')}`);\n        }\n        \n        console.log(`✓ Completed: ${scenario.name}`);\n      } catch (error) {\n        console.error(`✗ Failed to run scenario ${filePath}:`, error);\n        // Continue with other scenarios\n      }\n    }\n    \n    const summary: GuardianResult['summary'] = {\n      totalScenarios: scenarioFiles.length,\n      passed: reports.length,\n      failed: scenarioFiles.length - reports.length,\n      budgetViolations\n    };\n    \n    const result = { reports, summary };\n    \n    // Generate HTML report if requested\n    if (config.generateHTMLReport) {\n      const htmlReportPath = config.htmlReportPath || \n        (config.outputPath ? `${config.outputPath}/web-vitals-report.html` : 'web-vitals-report.html');\n      generateHTMLReport(result, htmlReportPath);\n    }\n    \n    return result;\n    \n  } finally {\n    await browser.close();\n  }\n}\n"],"names":["metric","value","initScript","results","performance"],"mappings":"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"}