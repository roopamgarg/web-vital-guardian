{"version":3,"file":"index.mjs","sources":["../src/utils/variableUtils.ts","../src/utils/fileUtils.ts","../src/utils/profileAnalyzer.ts","../src/utils/reportGenerator.ts","../src/measurements/webVitals.ts","../src/measurements/performanceObserver.ts","../src/scenarios/runner.ts","../src/guardian/budgetChecker.ts","../src/guardian/index.ts"],"sourcesContent":["import type { ScenarioFile, ScenarioStep } from '../types';\n\n/**\n * Interpolates variables in a string using ${variableName} syntax\n * @param text - Text containing variable references\n * @param variables - Object containing variable values\n * @returns Interpolated string\n */\nexport function interpolateVariables(text: string, variables: Record<string, string | number | boolean>): string {\n  if (!text || typeof text !== 'string') {\n    return text;\n  }\n\n  return text.replace(/\\$\\{([^}]+)\\}/g, (match, variableName) => {\n    const trimmedName = variableName.trim();\n    if (variables.hasOwnProperty(trimmedName)) {\n      return String(variables[trimmedName]);\n    }\n    // Return the original match if variable not found (could also throw error)\n    console.warn(`Variable '${trimmedName}' not found in variables`);\n    return match;\n  });\n}\n\n/**\n * Recursively interpolates variables in an object\n * @param obj - Object to interpolate variables in\n * @param variables - Object containing variable values\n * @returns Object with interpolated values\n */\nexport function interpolateObject(obj: any, variables: Record<string, string | number | boolean>): any {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (typeof obj === 'string') {\n    return interpolateVariables(obj, variables);\n  }\n\n  if (typeof obj === 'number' || typeof obj === 'boolean') {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => interpolateObject(item, variables));\n  }\n\n  if (typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = interpolateObject(value, variables);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\n/**\n * Interpolates variables in a scenario file\n * @param scenario - Scenario file to interpolate\n * @param variables - Global variables to use for interpolation\n * @returns Scenario file with interpolated values\n */\nexport function interpolateScenario(scenario: ScenarioFile, variables: Record<string, string | number | boolean>): ScenarioFile {\n  return interpolateObject(scenario, variables) as ScenarioFile;\n}\n\n/**\n * Merges global and scenario-specific variables\n * Scenario-specific variables take precedence over global ones\n * @param globalVariables - Global variables from config\n * @param scenarioVariables - Scenario-specific variables\n * @returns Merged variables object\n */\nexport function mergeVariables(\n  globalVariables: Record<string, string | number | boolean> = {},\n  scenarioVariables: Record<string, string | number | boolean> = {}\n): Record<string, string | number | boolean> {\n  return {\n    ...globalVariables,\n    ...scenarioVariables\n  };\n}\n","import { readFileSync, readdirSync, statSync } from 'node:fs';\nimport { join, dirname } from 'node:path';\nimport type { ScenarioFile } from '../types';\nimport { interpolateScenario, mergeVariables } from './variableUtils';\n\n/**\n * Recursively finds all *.scenario.json and *.scenario.js files in a directory\n * @param directory - Directory path to scan\n * @returns Array of file paths\n */\nexport function findScenarioFiles(directory: string): string[] {\n  const scenarioFiles: string[] = [];\n  \n  function scanDirectory(dir: string): void {\n    try {\n      const items = readdirSync(dir);\n      \n      for (const item of items) {\n        const fullPath = join(dir, item);\n        const stat = statSync(fullPath);\n        \n        if (stat.isDirectory()) {\n          scanDirectory(fullPath);\n        } else if (stat.isFile() && (item.endsWith('.scenario.json') || item.endsWith('.scenario.js'))) {\n          scenarioFiles.push(fullPath);\n        }\n      }\n    } catch (error) {\n      console.warn(`Warning: Could not scan directory ${dir}:`, error);\n    }\n  }\n  \n  scanDirectory(directory);\n  return scenarioFiles;\n}\n\n/**\n * Loads and validates a scenario file (JSON or JavaScript)\n * @param filePath - Path to the scenario file\n * @param globalVariables - Global variables to use for interpolation\n * @returns Parsed and validated scenario file with interpolated variables\n * @throws Error if file cannot be loaded or is invalid\n */\nexport function loadScenarioFile(filePath: string, globalVariables: Record<string, string | number | boolean> = {}): ScenarioFile {\n  try {\n    const content = readFileSync(filePath, 'utf-8');\n    let scenario: ScenarioFile;\n    \n    if (filePath.endsWith('.scenario.js')) {\n      // For JavaScript files, we need to evaluate the module\n      // Create a simple module context\n      const moduleExports: any = {};\n      const moduleRequire = (id: string) => {\n        // Simple require implementation for basic scenarios\n        throw new Error(`require('${id}') is not supported in scenario files. Use only built-in JavaScript features.`);\n      };\n      \n      // Create module object\n      const moduleObj = {\n        exports: moduleExports,\n        require: moduleRequire,\n        filename: filePath,\n        dirname: dirname(filePath)\n      };\n      \n      // Evaluate the JavaScript content in a safe context\n      // We need to handle both module.exports = ... and exports.default = ... patterns\n      const scenarioFunction = new Function('exports', 'require', 'module', '__filename', '__dirname', content);\n      scenarioFunction(moduleExports, moduleRequire, moduleObj, filePath, dirname(filePath));\n      \n      // Get the scenario from module.exports (which gets assigned by module.exports = ...)\n      scenario = moduleObj.exports.default || moduleObj.exports;\n      \n    } else {\n      // For JSON files, parse as usual\n      scenario = JSON.parse(content) as ScenarioFile;\n    }\n    \n    // Validate required fields\n    if (!scenario.name) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'name'`);\n    }\n    if (!scenario.url) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'url'`);\n    }\n    if (!scenario.steps || !Array.isArray(scenario.steps)) {\n      throw new Error(`Scenario file ${filePath} is missing required field 'steps'`);\n    }\n    \n    // Merge global and scenario-specific variables\n    const mergedVariables = mergeVariables(globalVariables, scenario.variables || {});\n    \n    // Interpolate variables in the scenario\n    const interpolatedScenario = interpolateScenario(scenario, mergedVariables);\n    \n    return interpolatedScenario;\n  } catch (error) {\n    throw new Error(`Failed to load scenario file ${filePath}: ${error}`);\n  }\n}\n","/**\n * Utility functions for analyzing enhanced profile data with source map information\n */\n\nexport interface EnhancedProfileNode {\n  callFrame: {\n    functionName: string;\n    originalFunctionName?: string;\n    originalSource?: string;\n    originalLine?: number;\n    originalColumn?: number;\n    url: string;\n  };\n  hitCount?: number;\n  children?: number[];\n}\n\nexport interface EnhancedProfile {\n  nodes: EnhancedProfileNode[];\n  samples: any[];\n  startTime: number;\n  endTime: number;\n}\n\n/**\n * Analyzes profile data and returns function performance statistics\n */\nexport function analyzeProfile(profile: EnhancedProfile) {\n  const functionStats = new Map<string, {\n    originalFunctionName: string;\n    originalSource: string;\n    originalLine: number;\n    totalTime: number;\n    hitCount: number;\n    samples: number;\n  }>();\n\n  // Analyze nodes\n  profile.nodes.forEach((node, index) => {\n    const callFrame = node.callFrame;\n    const functionName = callFrame.originalFunctionName || callFrame.functionName;\n    const source = callFrame.originalSource || callFrame.url;\n    const line = callFrame.originalLine || 0;\n    \n    if (!functionStats.has(functionName)) {\n      functionStats.set(functionName, {\n        originalFunctionName: functionName,\n        originalSource: source,\n        originalLine: line,\n        totalTime: 0,\n        hitCount: 0,\n        samples: 0\n      });\n    }\n    \n    const stats = functionStats.get(functionName)!;\n    stats.hitCount += node.hitCount || 0;\n  });\n\n  // Analyze samples\n  profile.samples.forEach(sample => {\n    if (sample.stackId !== undefined && profile.nodes[sample.stackId]) {\n      const node = profile.nodes[sample.stackId];\n      const functionName = node.callFrame.originalFunctionName || node.callFrame.functionName;\n      \n      if (functionStats.has(functionName)) {\n        functionStats.get(functionName)!.samples++;\n      }\n    }\n  });\n\n  return Array.from(functionStats.values())\n    .sort((a, b) => b.samples - a.samples);\n}\n\n/**\n * Gets the top N most expensive functions\n */\nexport function getTopExpensiveFunctions(profile: EnhancedProfile, limit: number = 10) {\n  const analysis = analyzeProfile(profile);\n  return analysis.slice(0, limit);\n}\n\n/**\n * Filters functions by source file\n */\nexport function getFunctionsBySource(profile: EnhancedProfile, sourcePattern: string) {\n  const analysis = analyzeProfile(profile);\n  return analysis.filter(func => \n    func.originalSource.includes(sourcePattern)\n  );\n}\n\n/**\n * Formats profile analysis for console output\n */\nexport function formatProfileAnalysis(profile: EnhancedProfile) {\n  const topFunctions = getTopExpensiveFunctions(profile, 10);\n  \n  console.log('\\n📊 Profile Analysis - Top 10 Most Expensive Functions:');\n  console.log('=' .repeat(80));\n  \n  topFunctions.forEach((func, index) => {\n    console.log(`${index + 1}. ${func.originalFunctionName}`);\n    console.log(`   Source: ${func.originalSource}:${func.originalLine}`);\n    console.log(`   Samples: ${func.samples}, Hits: ${func.hitCount}`);\n    console.log('');\n  });\n  \n  return topFunctions;\n}\n\n/**\n * Exports profile data in a readable format\n */\nexport function exportProfileData(profile: EnhancedProfile, format: 'json' | 'csv' = 'json') {\n  const analysis = analyzeProfile(profile);\n  \n  if (format === 'csv') {\n    const headers = 'Function Name,Source File,Line,Samples,Hit Count';\n    const rows = analysis.map(func => \n      `\"${func.originalFunctionName}\",\"${func.originalSource}\",${func.originalLine},${func.samples},${func.hitCount}`\n    );\n    return [headers, ...rows].join('\\n');\n  }\n  \n  return JSON.stringify(analysis, null, 2);\n}\n","import type { WebVitalsReport, GuardianResult } from '../types';\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * Generates an elegant HTML report for Web Vitals Guardian results\n * @param result - Guardian execution result\n * @param outputPath - Path to save the HTML report\n */\nexport function generateHTMLReport(result: GuardianResult, outputPath: string): void {\n  const html = createHTMLReport(result);\n  \n  // Ensure output directory exists\n  const outputDir = path.dirname(outputPath);\n  if (!fs.existsSync(outputDir)) {\n    fs.mkdirSync(outputDir, { recursive: true });\n  }\n  \n  fs.writeFileSync(outputPath, html);\n  console.log(`📊 HTML report generated: ${outputPath}`);\n}\n\n/**\n * Creates the complete HTML report content\n */\nfunction createHTMLReport(result: GuardianResult): string {\n  return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Vitals Guardian Report</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        ${getCSS()}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header class=\"header\">\n            <h1>🚀 Web Vitals Guardian Report</h1>\n            <div class=\"summary-stats\">\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\">${result.summary.totalScenarios}</div>\n                    <div class=\"stat-label\">Total Scenarios</div>\n                </div>\n                <div class=\"stat-card success\">\n                    <div class=\"stat-number\">${result.summary.passed}</div>\n                    <div class=\"stat-label\">Passed</div>\n                </div>\n                <div class=\"stat-card ${result.summary.failed > 0 ? 'error' : 'success'}\">\n                    <div class=\"stat-number\">${result.summary.failed}</div>\n                    <div class=\"stat-label\">Failed</div>\n                </div>\n                <div class=\"stat-card ${result.summary.budgetViolations.length > 0 ? 'warning' : 'success'}\">\n                    <div class=\"stat-number\">${result.summary.budgetViolations.length}</div>\n                    <div class=\"stat-label\">Budget Violations</div>\n                </div>\n            </div>\n        </header>\n\n        <main class=\"main-content\">\n            ${result.summary.budgetViolations.length > 0 ? createBudgetViolationsSection(result.summary.budgetViolations) : ''}\n            \n            <div class=\"scenarios-grid\">\n                ${result.reports.map(report => createScenarioCard(report)).join('')}\n            </div>\n        </main>\n    </div>\n\n    <script>\n        ${getJavaScript()}\n    </script>\n</body>\n</html>`;\n}\n\n/**\n * Creates CSS styles for the report\n */\nfunction getCSS(): string {\n  return `\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        min-height: 100vh;\n        color: #333;\n    }\n\n    .container {\n        max-width: 1400px;\n        margin: 0 auto;\n        padding: 20px;\n    }\n\n    .header {\n        background: rgba(255, 255, 255, 0.95);\n        backdrop-filter: blur(10px);\n        border-radius: 20px;\n        padding: 30px;\n        margin-bottom: 30px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n        text-align: center;\n    }\n\n    .header h1 {\n        font-size: 2.5rem;\n        margin-bottom: 30px;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        background-clip: text;\n    }\n\n    .summary-stats {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .stat-card {\n        background: white;\n        border-radius: 15px;\n        padding: 25px;\n        text-align: center;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n        transition: transform 0.3s ease, box-shadow 0.3s ease;\n        border-left: 5px solid #667eea;\n    }\n\n    .stat-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n    }\n\n    .stat-card.success {\n        border-left-color: #10b981;\n    }\n\n    .stat-card.error {\n        border-left-color: #ef4444;\n    }\n\n    .stat-card.warning {\n        border-left-color: #f59e0b;\n    }\n\n    .stat-number {\n        font-size: 2.5rem;\n        font-weight: 700;\n        margin-bottom: 10px;\n    }\n\n    .stat-label {\n        font-size: 1rem;\n        color: #6b7280;\n        font-weight: 500;\n    }\n\n    .main-content {\n        display: flex;\n        flex-direction: column;\n        gap: 30px;\n    }\n\n    .budget-violations {\n        background: rgba(255, 255, 255, 0.95);\n        backdrop-filter: blur(10px);\n        border-radius: 20px;\n        padding: 30px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n    }\n\n    .budget-violations h2 {\n        color: #ef4444;\n        margin-bottom: 20px;\n        font-size: 1.5rem;\n    }\n\n    .violation-item {\n        background: #fef2f2;\n        border: 1px solid #fecaca;\n        border-radius: 10px;\n        padding: 15px;\n        margin-bottom: 10px;\n        color: #dc2626;\n    }\n\n    .scenarios-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n        gap: 30px;\n    }\n\n    .scenario-card {\n        background: rgba(255, 255, 255, 0.95);\n        backdrop-filter: blur(10px);\n        border-radius: 20px;\n        padding: 30px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n        transition: transform 0.3s ease;\n    }\n\n    .scenario-card:hover {\n        transform: translateY(-5px);\n    }\n\n    .scenario-header {\n        margin-bottom: 25px;\n    }\n\n    .scenario-title {\n        font-size: 1.5rem;\n        font-weight: 700;\n        margin-bottom: 10px;\n        color: #1f2937;\n    }\n\n    .scenario-url {\n        color: #6b7280;\n        font-size: 0.9rem;\n        word-break: break-all;\n    }\n\n    .scenario-timestamp {\n        color: #9ca3af;\n        font-size: 0.8rem;\n        margin-top: 5px;\n    }\n\n    .metrics-section {\n        margin-bottom: 25px;\n    }\n\n    .section-title {\n        font-size: 1.2rem;\n        font-weight: 600;\n        margin-bottom: 15px;\n        color: #374151;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n    }\n\n    .metrics-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n        gap: 15px;\n    }\n\n    .metric-card {\n        background: #f8fafc;\n        border-radius: 12px;\n        padding: 15px;\n        text-align: center;\n        border: 2px solid transparent;\n        transition: all 0.3s ease;\n    }\n\n    .metric-card:hover {\n        border-color: #667eea;\n        background: #f1f5f9;\n    }\n\n    .metric-name {\n        font-size: 0.8rem;\n        color: #6b7280;\n        font-weight: 500;\n        margin-bottom: 5px;\n    }\n\n    .metric-value {\n        font-size: 1.2rem;\n        font-weight: 700;\n        color: #1f2937;\n    }\n\n    .metric-unit {\n        font-size: 0.7rem;\n        color: #9ca3af;\n    }\n\n    .network-section {\n        margin-bottom: 25px;\n    }\n\n    .network-summary {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n        gap: 15px;\n        margin-bottom: 20px;\n    }\n\n    .network-stat {\n        background: #f0f9ff;\n        border-radius: 10px;\n        padding: 15px;\n        text-align: center;\n        border-left: 4px solid #0ea5e9;\n    }\n\n    .network-stat-label {\n        font-size: 0.8rem;\n        color: #0369a1;\n        font-weight: 500;\n        margin-bottom: 5px;\n    }\n\n    .network-stat-value {\n        font-size: 1.1rem;\n        font-weight: 700;\n        color: #0c4a6e;\n    }\n\n    .requests-by-type {\n        margin-bottom: 20px;\n    }\n\n    .chart-container {\n        position: relative;\n        height: 300px;\n        margin-bottom: 20px;\n    }\n\n    .requests-table {\n        background: #f8fafc;\n        border-radius: 10px;\n        overflow: hidden;\n        max-height: 300px;\n        overflow-y: auto;\n    }\n\n    .requests-table table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    .requests-table th,\n    .requests-table td {\n        padding: 12px;\n        text-align: left;\n        border-bottom: 1px solid #e5e7eb;\n    }\n\n    .requests-table th {\n        background: #f3f4f6;\n        font-weight: 600;\n        color: #374151;\n        position: sticky;\n        top: 0;\n    }\n\n    .requests-table tr:hover {\n        background: #f9fafb;\n    }\n\n    .resource-type-badge {\n        display: inline-block;\n        padding: 4px 8px;\n        border-radius: 6px;\n        font-size: 0.7rem;\n        font-weight: 500;\n        text-transform: uppercase;\n    }\n\n    .resource-type-script { background: #dbeafe; color: #1e40af; }\n    .resource-type-stylesheet { background: #fce7f3; color: #be185d; }\n    .resource-type-image { background: #dcfce7; color: #166534; }\n    .resource-type-font { background: #fef3c7; color: #92400e; }\n    .resource-type-api { background: #e0e7ff; color: #3730a3; }\n    .resource-type-other { background: #f3f4f6; color: #374151; }\n\n    .performance-section {\n        margin-bottom: 25px;\n    }\n\n    .profile-section {\n        margin-bottom: 25px;\n    }\n\n    .profile-info {\n        background: #f8fafc;\n        border-radius: 10px;\n        padding: 15px;\n        color: #6b7280;\n        font-size: 0.9rem;\n    }\n\n    .toggle-button {\n        background: #667eea;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        padding: 8px 16px;\n        cursor: pointer;\n        font-size: 0.8rem;\n        margin-bottom: 15px;\n        transition: background 0.3s ease;\n    }\n\n    .toggle-button:hover {\n        background: #5a67d8;\n    }\n\n    .collapsible-content {\n        display: none;\n    }\n\n    .collapsible-content.active {\n        display: block;\n    }\n\n    @media (max-width: 768px) {\n        .container {\n            padding: 10px;\n        }\n        \n        .header h1 {\n            font-size: 2rem;\n        }\n        \n        .scenarios-grid {\n            grid-template-columns: 1fr;\n        }\n        \n        .summary-stats {\n            grid-template-columns: repeat(2, 1fr);\n        }\n    }\n  `;\n}\n\n/**\n * Creates JavaScript for interactive features\n */\nfunction getJavaScript(): string {\n  return `\n    // Toggle collapsible sections\n    document.addEventListener('DOMContentLoaded', function() {\n        const toggleButtons = document.querySelectorAll('.toggle-button');\n        \n        toggleButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                const content = this.nextElementSibling;\n                const isActive = content.classList.contains('active');\n                \n                if (isActive) {\n                    content.classList.remove('active');\n                    this.textContent = this.textContent.replace('Hide', 'Show');\n                } else {\n                    content.classList.add('active');\n                    this.textContent = this.textContent.replace('Show', 'Hide');\n                }\n            });\n        });\n\n        // Initialize charts for network requests\n        initializeCharts();\n    });\n\n    function initializeCharts() {\n        const chartContainers = document.querySelectorAll('.chart-container');\n        \n        chartContainers.forEach(container => {\n            const canvas = container.querySelector('canvas');\n            if (!canvas) return;\n            \n            const ctx = canvas.getContext('2d');\n            const data = JSON.parse(canvas.dataset.chartData);\n            \n            new Chart(ctx, {\n                type: 'doughnut',\n                data: {\n                    labels: Object.keys(data),\n                    datasets: [{\n                        data: Object.values(data),\n                        backgroundColor: [\n                            '#667eea',\n                            '#764ba2',\n                            '#f093fb',\n                            '#f5576c',\n                            '#4facfe',\n                            '#00f2fe',\n                            '#43e97b',\n                            '#38f9d7'\n                        ],\n                        borderWidth: 0\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            position: 'bottom',\n                            labels: {\n                                padding: 20,\n                                usePointStyle: true\n                            }\n                        }\n                    }\n                }\n            });\n        });\n    }\n  `;\n}\n\n/**\n * Creates budget violations section\n */\nfunction createBudgetViolationsSection(violations: string[]): string {\n  return `\n    <div class=\"budget-violations\">\n        <h2>⚠️ Budget Violations</h2>\n        ${violations.map(violation => `\n            <div class=\"violation-item\">${violation}</div>\n        `).join('')}\n    </div>\n  `;\n}\n\n/**\n * Creates a scenario card with all metrics\n */\nfunction createScenarioCard(report: WebVitalsReport): string {\n  return `\n    <div class=\"scenario-card\">\n        <div class=\"scenario-header\">\n            <div class=\"scenario-title\">${report.scenario}</div>\n            <div class=\"scenario-url\">${report.url}</div>\n            <div class=\"scenario-timestamp\">${new Date(report.timestamp).toLocaleString()}</div>\n        </div>\n\n        ${createWebVitalsSection(report.metrics)}\n        ${createPerformanceSection(report.performance)}\n        ${createNetworkSection(report.network)}\n        ${createProfileSection(report.profile)}\n    </div>\n  `;\n}\n\n/**\n * Creates Web Vitals metrics section\n */\nfunction createWebVitalsSection(metrics: WebVitalsReport['metrics']): string {\n  const metricCards = Object.entries(metrics)\n    .filter(([_, value]) => value !== undefined)\n    .map(([name, value]) => {\n      const unit = name === 'CLS' ? '' : 'ms';\n      const color = getMetricColor(name, value);\n      return `\n        <div class=\"metric-card\" style=\"border-color: ${color}\">\n            <div class=\"metric-name\">${name}</div>\n            <div class=\"metric-value\">${value?.toFixed(2)}</div>\n            <div class=\"metric-unit\">${unit}</div>\n        </div>\n      `;\n    }).join('');\n\n  return `\n    <div class=\"metrics-section\">\n        <div class=\"section-title\">\n            📊 Web Vitals\n        </div>\n        <div class=\"metrics-grid\">\n            ${metricCards}\n        </div>\n    </div>\n  `;\n}\n\n/**\n * Creates performance metrics section\n */\nfunction createPerformanceSection(performance: WebVitalsReport['performance']): string {\n  return `\n    <div class=\"performance-section\">\n        <div class=\"section-title\">\n            ⚡ Performance Metrics\n        </div>\n        <div class=\"metrics-grid\">\n            <div class=\"metric-card\">\n                <div class=\"metric-name\">Load Time</div>\n                <div class=\"metric-value\">${performance.loadTime.toFixed(2)}</div>\n                <div class=\"metric-unit\">ms</div>\n            </div>\n            <div class=\"metric-card\">\n                <div class=\"metric-name\">DOM Content Loaded</div>\n                <div class=\"metric-value\">${performance.domContentLoaded.toFixed(2)}</div>\n                <div class=\"metric-unit\">ms</div>\n            </div>\n            <div class=\"metric-card\">\n                <div class=\"metric-name\">First Paint</div>\n                <div class=\"metric-value\">${performance.firstPaint.toFixed(2)}</div>\n                <div class=\"metric-unit\">ms</div>\n            </div>\n        </div>\n    </div>\n  `;\n}\n\n/**\n * Creates network requests section\n */\nfunction createNetworkSection(network: WebVitalsReport['network']): string {\n  if (!network || network.requests.length === 0) {\n    return `\n      <div class=\"network-section\">\n        <div class=\"section-title\">🌐 Network Requests</div>\n        <div class=\"profile-info\">No network data available</div>\n      </div>\n    `;\n  }\n\n  const summary = network.summary;\n  const requestsByType = summary.requestsByType;\n  const chartData = JSON.stringify(requestsByType);\n\n  return `\n    <div class=\"network-section\">\n        <div class=\"section-title\">\n            🌐 Network Requests\n        </div>\n        \n        <div class=\"network-summary\">\n            <div class=\"network-stat\">\n                <div class=\"network-stat-label\">Total Requests</div>\n                <div class=\"network-stat-value\">${summary.totalRequests}</div>\n            </div>\n            <div class=\"network-stat\">\n                <div class=\"network-stat-label\">Total Size</div>\n                <div class=\"network-stat-value\">${formatBytes(summary.totalTransferSize)}</div>\n            </div>\n            <div class=\"network-stat\">\n                <div class=\"network-stat-label\">Avg Response</div>\n                <div class=\"network-stat-value\">${summary.averageResponseTime.toFixed(2)}ms</div>\n            </div>\n            <div class=\"network-stat\">\n                <div class=\"network-stat-label\">Failed</div>\n                <div class=\"network-stat-value\">${summary.failedRequests}</div>\n            </div>\n        </div>\n\n        ${summary.slowestRequest ? `\n            <div class=\"network-stat\" style=\"margin-bottom: 20px;\">\n                <div class=\"network-stat-label\">Slowest Request</div>\n                <div class=\"network-stat-value\" style=\"font-size: 0.9rem; word-break: break-all;\">\n                    ${summary.slowestRequest.url}\n                </div>\n                <div style=\"color: #ef4444; font-weight: 600; margin-top: 5px;\">\n                    ${summary.slowestRequest.responseTime.toFixed(2)}ms\n                </div>\n            </div>\n        ` : ''}\n\n        <div class=\"requests-by-type\">\n            <div class=\"section-title\">📈 Requests by Type</div>\n            <div class=\"chart-container\">\n                <canvas data-chart-data='${chartData}'></canvas>\n            </div>\n        </div>\n\n        <button class=\"toggle-button\">Show Detailed Requests</button>\n        <div class=\"collapsible-content\">\n            <div class=\"requests-table\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Type</th>\n                            <th>URL</th>\n                            <th>Response Time</th>\n                            <th>Size</th>\n                            <th>Domain</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${network.requests.slice(0, 20).map(req => `\n                            <tr>\n                                <td>\n                                    <span class=\"resource-type-badge resource-type-${req.resourceType}\">\n                                        ${req.resourceType}\n                                    </span>\n                                </td>\n                                <td style=\"max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">\n                                    ${req.url}\n                                </td>\n                                <td>${req.responseTime.toFixed(2)}ms</td>\n                                <td>${formatBytes(req.transferSize)}</td>\n                                <td>${req.domain}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n                ${network.requests.length > 20 ? `\n                    <div style=\"padding: 15px; text-align: center; color: #6b7280;\">\n                        ... and ${network.requests.length - 20} more requests\n                    </div>\n                ` : ''}\n            </div>\n        </div>\n    </div>\n  `;\n}\n\n/**\n * Creates profile section\n */\nfunction createProfileSection(profile: any): string {\n  if (!profile) {\n    return `\n      <div class=\"profile-section\">\n        <div class=\"section-title\">📊 Profile</div>\n        <div class=\"profile-info\">No profile data available</div>\n      </div>\n    `;\n  }\n\n  return `\n    <div class=\"profile-section\">\n        <div class=\"section-title\">📊 Profile</div>\n        <div class=\"profile-info\">\n            Profile data collected: ${profile.nodes ? profile.nodes.length : 0} nodes\n        </div>\n    </div>\n  `;\n}\n\n/**\n * Gets color for metric based on value and thresholds\n */\nfunction getMetricColor(metricName: string, value: number): string {\n  const thresholds = {\n    FCP: { good: 1800, poor: 3000 },\n    LCP: { good: 2500, poor: 4000 },\n    CLS: { good: 0.1, poor: 0.25 },\n    INP: { good: 200, poor: 500 },\n    TTFB: { good: 800, poor: 1800 }\n  };\n\n  const threshold = thresholds[metricName as keyof typeof thresholds];\n  if (!threshold) return '#667eea';\n\n  if (value <= threshold.good) return '#10b981';\n  if (value <= threshold.poor) return '#f59e0b';\n  return '#ef4444';\n}\n\n/**\n * Formats bytes to human readable format\n */\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  \n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n","import type { Page } from 'playwright';\nimport type { WebVitalsReport, NetworkRequest, NetworkSummary } from '../types';\n\n/**\n * Install Web Vitals collectors at the earliest script time.\n * Call BEFORE navigation to capture FCP/LCP from the initial load.\n */\nexport async function startVitalsObservation(\n  page: Page,\n  options?: { usePerformanceObserver?: boolean; fallbackToPackage?: boolean }\n): Promise<void> {\n  const useObserver = options?.usePerformanceObserver ?? true;\n  const allowPackage = options?.fallbackToPackage ?? false;\n\n  // For web-vitals package, we'll load it after navigation but before steps\n  if (!useObserver && allowPackage) {\n    // Just initialize the results object for now\n    const initScript = `\n      (function(){\n        if (window.__wvg && window.__wvg.started) return;\n        window.__wvg = { started: true, results: {}, packageLoaded: false };\n      })();\n    `;\n    await page.addInitScript({ content: initScript });\n    return;\n  }\n\n  if (!useObserver) return; // No observers requested\n\n  const initScript = `\n    (function(){\n      if (window.__wvg && window.__wvg.started) return;\n      window.__wvg = { started: true, results: {}, observers: [] };\n      try {\n        // FCP\n        try {\n          const fcpObs = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const fcp = entries.find(e => e.name === 'first-contentful-paint');\n            if (fcp) { window.__wvg.results.FCP = fcp.startTime; }\n          });\n          fcpObs.observe({ entryTypes: ['paint'] });\n          window.__wvg.observers.push(fcpObs);\n        } catch {}\n\n        // LCP\n        try {\n          const lcpObs = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const last = entries[entries.length - 1];\n            if (last) { window.__wvg.results.LCP = last.startTime; }\n          });\n          lcpObs.observe({ entryTypes: ['largest-contentful-paint'] });\n          window.__wvg.observers.push(lcpObs);\n        } catch {}\n\n        // CLS\n        try {\n          let cls = 0;\n          const clsObs = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!entry.hadRecentInput) { cls += (entry).value || 0; }\n            }\n            window.__wvg.results.CLS = cls;\n          });\n          clsObs.observe({ entryTypes: ['layout-shift'] });\n          window.__wvg.observers.push(clsObs);\n        } catch {}\n\n        // INP (simplified event delay aggregation)\n        try {\n          let maxDelay = 0;\n          const inpObs = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              const ps = (entry).processingStart;\n              const st = entry.startTime;\n              if (ps && st) { maxDelay = Math.max(maxDelay, ps - st); }\n            }\n            window.__wvg.results.INP = maxDelay;\n          });\n          inpObs.observe({ entryTypes: ['event'] });\n          window.__wvg.observers.push(inpObs);\n        } catch {}\n      } catch {}\n    })();\n  `;\n  await page.addInitScript({ content: initScript });\n}\n\n/**\n * Load web-vitals package and register metrics (for package approach)\n * Call AFTER navigation but BEFORE scenario steps\n */\nexport async function loadWebVitalsPackage(page: Page): Promise<void> {\n  try {\n    // Load the web-vitals package\n    await page.addScriptTag({\n      url: 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.iife.js'\n    });\n    \n    // Wait a moment for the script to load\n    await page.waitForTimeout(1000);\n    \n    // Register all metrics\n    await page.evaluate(() => {\n      if ((window as any)['webVitals'] && (window as any).__wvg) {\n        const wv = (window as any)['webVitals'];\n        (window as any).__wvg.packageLoaded = true;\n        \n        // Register all metrics\n        wv.onFCP((metric: any) => { \n          (window as any).__wvg.results.FCP = metric.value; \n          console.log('FCP measured (web-vitals package):', metric.value);\n        });\n        wv.onLCP((metric: any) => { \n          (window as any).__wvg.results.LCP = metric.value; \n          console.log('LCP measured (web-vitals package):', metric.value);\n        });\n        wv.onCLS((metric: any) => { \n          (window as any).__wvg.results.CLS = metric.value; \n          console.log('CLS measured (web-vitals package):', metric.value);\n        });\n        wv.onINP((metric: any) => { \n          (window as any).__wvg.results.INP = metric.value; \n          console.log('INP measured (web-vitals package):', metric.value);\n        });\n      }\n    });\n    \n    console.log('✅ Web-vitals package loaded and metrics registered');\n  } catch (error) {\n    console.warn('⚠️  Failed to load web-vitals package:', error);\n  }\n}\n\n/**\n * Disconnect observers and collect measured metrics.\n * Call AFTER scenario steps and a short settle delay.\n */\nexport async function collectVitals(page: Page): Promise<WebVitalsReport['metrics']> {\n  const results = await page.evaluate(() => {\n    const out: any = (window as any).__wvg?.results ? { ...(window as any).__wvg.results } : {};\n    \n    // Add TTFB from Navigation Timing API\n    try {\n      const nav = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      if (nav) {\n        out.TTFB = nav.responseStart - nav.requestStart;\n      }\n    } catch {}\n    \n    // Cleanup observers (for PerformanceObserver approach)\n    try {\n      if ((window as any).__wvg?.observers) {\n        for (const obs of (window as any).__wvg.observers) { \n          try { obs.disconnect(); } catch {} \n        }\n      }\n    } catch {}\n    \n    // Reset state\n    try {\n      if ((window as any).__wvg) {\n        (window as any).__wvg.started = false;\n      }\n    } catch {}\n    \n    return out;\n  });\n  return results as WebVitalsReport['metrics'];\n}\n\n/**\n * Measures Web Vitals metrics using PerformanceObserver (no external dependencies)\n * @param page - Playwright page instance\n * @returns Promise resolving to Web Vitals metrics\n */\nexport async function measureWebVitalsWithObserver(page: Page): Promise<WebVitalsReport['metrics']> {\n  const metrics: WebVitalsReport['metrics'] = {};\n  \n  try {\n    const results = await page.evaluate(() => {\n      return new Promise<WebVitalsReport['metrics']>((resolve) => {\n        const results: WebVitalsReport['metrics'] = {};\n        let resolved = false;\n        \n        // Timeout after 10 seconds to prevent hanging\n        const timeout = setTimeout(() => {\n          if (!resolved) {\n            resolved = true;\n            resolve(results);\n          }\n        }, 10000);\n        \n        // Helper function to resolve once\n        const resolveOnce = (value: WebVitalsReport['metrics']) => {\n          if (!resolved) {\n            resolved = true;\n            clearTimeout(timeout);\n            resolve(value);\n          }\n        };\n        \n        // Track metrics collected\n        let metricsCollected = 0;\n        const totalMetrics = 4; // FCP, LCP, CLS, INP\n        \n        const checkComplete = () => {\n          metricsCollected++;\n          if (metricsCollected >= totalMetrics && !resolved) {\n            resolveOnce(results);\n          }\n        };\n        \n        // 1. First Contentful Paint (FCP)\n        try {\n          const fcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');\n            if (fcpEntry) {\n              results.FCP = fcpEntry.startTime;\n              console.log('FCP measured (PerformanceObserver):', fcpEntry.startTime);\n              fcpObserver.disconnect();\n              checkComplete();\n            }\n          });\n          fcpObserver.observe({ entryTypes: ['paint'] });\n        } catch (e) {\n          console.warn('FCP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 2. Largest Contentful Paint (LCP)\n        try {\n          const lcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const lastEntry = entries[entries.length - 1];\n            if (lastEntry) {\n              results.LCP = lastEntry.startTime;\n              console.log('LCP measured (PerformanceObserver):', lastEntry.startTime);\n            }\n          });\n          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          \n          // LCP can change, so we wait a bit before finalizing\n          setTimeout(() => {\n            lcpObserver.disconnect();\n            checkComplete();\n          }, 2000);\n        } catch (e) {\n          console.warn('LCP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 3. Cumulative Layout Shift (CLS)\n        try {\n          let clsValue = 0;\n          const clsObserver = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              if (!(entry as any).hadRecentInput) {\n                clsValue += (entry as any).value;\n              }\n            }\n            results.CLS = clsValue;\n            console.log('CLS measured (PerformanceObserver):', clsValue);\n          });\n          clsObserver.observe({ entryTypes: ['layout-shift'] });\n          \n          // CLS measurement continues until page unload, so we wait\n          setTimeout(() => {\n            clsObserver.disconnect();\n            checkComplete();\n          }, 3000);\n        } catch (e) {\n          console.warn('CLS PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 4. Interaction to Next Paint (INP) - simplified version\n        try {\n          let maxInteractionDelay = 0;\n          const inpObserver = new PerformanceObserver((list) => {\n            for (const entry of list.getEntries()) {\n              const processingStart = (entry as any).processingStart;\n              const startTime = entry.startTime;\n              if (processingStart && startTime) {\n                const delay = processingStart - startTime;\n                maxInteractionDelay = Math.max(maxInteractionDelay, delay);\n              }\n            }\n            results.INP = maxInteractionDelay;\n            console.log('INP measured (PerformanceObserver):', maxInteractionDelay);\n          });\n          inpObserver.observe({ entryTypes: ['event'] });\n          \n          // Wait for interactions to settle\n          setTimeout(() => {\n            inpObserver.disconnect();\n            checkComplete();\n          }, 2000);\n        } catch (e) {\n          console.warn('INP PerformanceObserver failed:', e);\n          checkComplete();\n        }\n        \n        // 5. Time to First Byte (TTFB) - using Navigation Timing\n        try {\n          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n          if (navigation) {\n            results.TTFB = navigation.responseStart - navigation.requestStart;\n            console.log('TTFB measured (PerformanceObserver):', results.TTFB);\n          }\n        } catch (e) {\n          console.warn('TTFB measurement failed:', e);\n          // TTFB is optional, don't fail if not available\n        }\n      });\n    });\n    \n    // Merge results\n    Object.assign(metrics, results);\n    \n  } catch (error) {\n    console.warn('Warning: Could not measure Web Vitals with PerformanceObserver:', error);\n  }\n  \n  return metrics;\n}\n\n/**\n * Measures Web Vitals metrics on a page with CSP-safe fallback\n * @param page - Playwright page instance\n * @param options - Configuration options for Web Vitals measurement\n * @returns Promise resolving to Web Vitals metrics\n */\nexport async function measureWebVitals(\n  page: Page, \n  options?: { usePerformanceObserver?: boolean; fallbackToPackage?: boolean }\n): Promise<WebVitalsReport['metrics']> {\n  const useObserver = options?.usePerformanceObserver ?? true; // Default to CSP-safe approach\n  const allowFallback = options?.fallbackToPackage ?? false;   // Default to no fallback\n  \n  // If forced to use PerformanceObserver, use it directly\n  if (useObserver && !allowFallback) {\n    console.log('🔍 Measuring Web Vitals with PerformanceObserver (CSP-safe, no fallback)...');\n    return measureWebVitalsWithObserver(page);\n  }\n  \n  // If forced to use web-vitals package, try it first\n  if (!useObserver && allowFallback) {\n    try {\n      console.log('📦 Measuring Web Vitals with web-vitals package...');\n      return measureWebVitalsWithPackage(page);\n    } catch (error) {\n      console.warn('⚠️  web-vitals package failed, falling back to PerformanceObserver');\n      return measureWebVitalsWithObserver(page);\n    }\n  }\n  \n  // Default behavior: Try PerformanceObserver first, then web-vitals package if allowed\n  try {\n    console.log('🔍 Measuring Web Vitals with PerformanceObserver (CSP-safe)...');\n    const observerResults = await measureWebVitalsWithObserver(page);\n    \n    // If we got at least some metrics, use them\n    const hasMetrics = Object.keys(observerResults).length > 0;\n    if (hasMetrics) {\n      console.log('✅ Successfully measured Web Vitals with PerformanceObserver');\n      return observerResults;\n    }\n  } catch (error) {\n    console.warn('PerformanceObserver failed, trying web-vitals package:', error);\n  }\n  \n  // Fallback to web-vitals package if allowed (may be blocked by CSP)\n  if (allowFallback) {\n    try {\n      console.log('📦 Attempting to load web-vitals package...');\n      return await measureWebVitalsWithPackage(page);\n    } catch (error) {\n      console.warn('⚠️  web-vitals package blocked by CSP, using PerformanceObserver fallback');\n      // Final fallback to PerformanceObserver\n      return await measureWebVitalsWithObserver(page);\n    }\n  }\n  \n  // If no fallback allowed and PerformanceObserver failed, return empty metrics\n  console.warn('⚠️  PerformanceObserver failed and fallback disabled, returning empty metrics');\n  return {};\n}\n\n/**\n * Original web-vitals package implementation (for fallback)\n */\nasync function measureWebVitalsWithPackage(page: Page): Promise<WebVitalsReport['metrics']> {\n  const metrics: WebVitalsReport['metrics'] = {};\n  \n  try {\n    // Inject Web Vitals measurement script\n    await page.addScriptTag({\n      url: 'https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.iife.js'\n    });\n    \n    // Wait a moment for the script to load\n    await page.waitForTimeout(1000);\n    \n    // Measure all Web Vitals metrics together with proper timing\n    const allMetrics = await page.evaluate(() => {\n      return new Promise<WebVitalsReport['metrics']>((resolve) => {\n        const results: WebVitalsReport['metrics'] = {};\n        let metricsCollected = 0;\n        const totalMetrics = 4; // FCP, LCP, CLS, INP\n        \n        // Timeout after 15 seconds\n        const timeout = setTimeout(() => {\n          resolve(results);\n        }, 15000);\n        \n        const checkComplete = () => {\n          metricsCollected++;\n          if (metricsCollected >= totalMetrics) {\n            clearTimeout(timeout);\n            resolve(results);\n          }\n        };\n        \n        // Check if web-vitals is available\n        if (!('webVitals' in window)) {\n          console.warn('webVitals library not loaded');\n          clearTimeout(timeout);\n          resolve(results);\n          return;\n        }\n        \n        const webVitals = (window as any)['webVitals'];\n        \n        // Measure FCP (First Contentful Paint)\n        try {\n          webVitals.onFCP((metric: any) => {\n            results.FCP = metric.value;\n            console.log('FCP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('FCP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure LCP (Largest Contentful Paint)\n        try {\n          webVitals.onLCP((metric: any) => {\n            results.LCP = metric.value;\n            console.log('LCP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('LCP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure CLS (Cumulative Layout Shift)\n        try {\n          webVitals.onCLS((metric: any) => {\n            results.CLS = metric.value;\n            console.log('CLS measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('CLS measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure INP (Interaction to Next Paint)\n        try {\n          webVitals.onINP((metric: any) => {\n            results.INP = metric.value;\n            console.log('INP measured:', metric.value);\n            checkComplete();\n          });\n        } catch (e) {\n          console.warn('INP measurement failed:', e);\n          checkComplete();\n        }\n        \n        // Measure TTFB (Time to First Byte) using Performance API\n        try {\n          const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n          if (navigation) {\n            results.TTFB = navigation.responseStart - navigation.requestStart;\n            console.log('TTFB measured:', results.TTFB);\n          }\n        } catch (e) {\n          console.warn('TTFB measurement failed:', e);\n        }\n      });\n    });\n    \n    // Merge results\n    Object.assign(metrics, allMetrics);\n    \n    console.log('✅ Successfully measured Web Vitals with web-vitals package:', metrics);\n    \n  } catch (error) {\n    console.warn('Warning: Could not measure some Web Vitals with package:', error);\n    throw error; // Re-throw to trigger fallback\n  }\n  \n  return metrics;\n}\n\n/**\n * Measures additional performance metrics using the Performance API\n * @param page - Playwright page instance\n * @returns Promise resolving to performance metrics\n */\nexport async function measurePerformanceMetrics(page: Page): Promise<WebVitalsReport['performance']> {\n  const performanceMetrics = await page.evaluate((): WebVitalsReport['performance'] => {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint') as PerformanceEntry[];\n    \n    return {\n      loadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n      firstPaint: paint.find((entry: PerformanceEntry) => entry.name === 'first-paint')?.startTime || 0\n    };\n  });\n  \n  return performanceMetrics;\n}\n\n\n\n/**\n * Measures network requests using the Performance API\n * @param page - Playwright page instance\n * @returns Promise resolving to network request data\n */\nexport async function measureNetworkRequests(page: Page): Promise<WebVitalsReport['network']> {\n  const networkData = await page.evaluate((): WebVitalsReport['network'] => {\n\n    /**\n * Helper function to determine resource type from URL\n */\nfunction getResourceType(url: string): string {\n  const extension = url.split('.').pop()?.toLowerCase();\n  const pathname = new URL(url).pathname.toLowerCase();\n  \n  if (pathname.includes('/api/') || pathname.includes('/graphql')) {\n    return 'api';\n  }\n  \n  switch (extension) {\n    case 'js':\n      return 'script';\n    case 'css':\n      return 'stylesheet';\n    case 'png':\n    case 'jpg':\n    case 'jpeg':\n    case 'gif':\n    case 'svg':\n    case 'webp':\n    case 'ico':\n      return 'image';\n    case 'woff':\n    case 'woff2':\n    case 'ttf':\n    case 'otf':\n      return 'font';\n    case 'mp4':\n    case 'webm':\n    case 'ogg':\n      return 'media';\n    case 'json':\n      return 'json';\n    case 'xml':\n      return 'xml';\n    default:\n      return 'other';\n  }\n}\n\n    const entries = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n    \n    const requests: NetworkRequest[] = entries.map(entry => {\n      const url = new URL(entry.name);\n      const domain = url.hostname;\n      const protocol = url.protocol.replace(':', '');\n      \n      return {\n        url: entry.name,\n        method: 'GET', // Performance API doesn't provide method, defaulting to GET\n        status: 200, // Performance API doesn't provide status, defaulting to 200\n        statusText: 'OK',\n        responseTime: entry.responseEnd - entry.responseStart,\n        transferSize: entry.transferSize || 0,\n        encodedBodySize: entry.encodedBodySize || 0,\n        decodedBodySize: entry.decodedBodySize || 0,\n        startTime: entry.startTime,\n        endTime: entry.responseEnd,\n        duration: entry.duration,\n        resourceType: getResourceType(entry.name),\n        fromCache: entry.transferSize === 0 && entry.encodedBodySize > 0,\n        protocol,\n        domain\n      };\n    });\n\n    // Calculate summary statistics\n    const summary: NetworkSummary = {\n      totalRequests: requests.length,\n      totalTransferSize: requests.reduce((sum, req) => sum + req.transferSize, 0),\n      totalEncodedSize: requests.reduce((sum, req) => sum + req.encodedBodySize, 0),\n      totalDecodedSize: requests.reduce((sum, req) => sum + req.decodedBodySize, 0),\n      averageResponseTime: requests.length > 0 \n        ? requests.reduce((sum, req) => sum + req.responseTime, 0) / requests.length \n        : 0,\n      slowestRequest: requests.length > 0 \n        ? requests.reduce((slowest, req) => req.responseTime > slowest.responseTime ? req : slowest)\n        : null,\n      failedRequests: requests.filter(req => req.status >= 400).length,\n      requestsByType: {},\n      requestsByDomain: {}\n    };\n\n    // Count requests by type and domain\n    requests.forEach(req => {\n      summary.requestsByType[req.resourceType] = (summary.requestsByType[req.resourceType] || 0) + 1;\n      summary.requestsByDomain[req.domain] = (summary.requestsByDomain[req.domain] || 0) + 1;\n    });\n\n    return {\n      requests,\n      summary\n    };\n  });\n\n  return networkData;\n}\n","// helper/profile-js.ts\nimport type { Page } from '@playwright/test';\n\nexport async function profileJs<T>(page: Page, run: () => Promise<T>) {\n  const cdp = await page.context().newCDPSession(page);\n  await cdp.send('Profiler.enable');\n  await cdp.send('Profiler.start');           // sampling profiler\n  let error;\n  try { await run(); } catch (e) { error = e; }\n  const { profile } = await cdp.send('Profiler.stop');\n  await cdp.send('Profiler.disable');\n  return { profile, error };\n}\n","import type { Browser, Page } from 'playwright';\nimport type { ScenarioStep, ScenarioFile, WebVitalsReport, GuardianConfig } from '../types';\nimport { measureWebVitals, measurePerformanceMetrics, measureNetworkRequests, startVitalsObservation, collectVitals, loadWebVitalsPackage } from '../measurements/webVitals';\nimport { profileJs } from '../measurements/performanceObserver';\n\n/**\n * Executes a single scenario step\n * @param page - Playwright page instance\n * @param step - Scenario step to execute\n * @throws Error if step execution fails\n */\nexport async function executeScenarioStep(page: Page, step: ScenarioStep): Promise<void> {\n  const timeout = step.timeout || 30000;\n  \n  switch (step.type) {\n    case 'navigate':\n      if (!step.url) {\n        throw new Error('Navigate step requires a URL');\n      }\n      await page.goto(step.url, { waitUntil: 'networkidle', timeout });\n      break;\n      \n    case 'click':\n      if (!step.selector) {\n        throw new Error('Click step requires a selector');\n      }\n      await page.click(step.selector, { timeout });\n      break;\n      \n    case 'type':\n      if (!step.selector || !step.text) {\n        throw new Error('Type step requires a selector and text');\n      }\n      await page.fill(step.selector, step.text, { timeout });\n      break;\n      \n    case 'wait':\n      if (step.waitFor) {\n        await page.waitForSelector(step.waitFor, { timeout });\n      } else {\n        await page.waitForTimeout(step.timeout || 1000);\n      }\n      break;\n      \n    case 'scroll':\n      await page.evaluate(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      });\n      break;\n      \n    case 'hover':\n      if (!step.selector) {\n        throw new Error('Hover step requires a selector');\n      }\n      await page.hover(step.selector, { timeout });\n      break;\n      \n    default:\n      throw new Error(`Unknown step type: ${step.type}`);\n  }\n}\n\nasync function runProfile(page: Page, scenario: ScenarioFile): Promise<void> {\n    for (const step of scenario.steps) {\n      await executeScenarioStep(page, step);\n    }\n}\n\n/**\n * Runs a complete scenario and measures Web Vitals\n * @param browser - Playwright browser instance\n * @param scenario - Scenario configuration\n * @param config - Guardian configuration (for Web Vitals options)\n * @returns Promise resolving to Web Vitals report\n */\nexport async function runScenario(browser: Browser, scenario: ScenarioFile, config?: GuardianConfig): Promise<WebVitalsReport> {\n  \n  const context = await browser.newContext({bypassCSP: true});\n  const page = await context.newPage();\n  \n  try {\n    // Navigate to the initial URL\n    \n    \n    // Start Web Vitals observation BEFORE navigation\n    await startVitalsObservation(page, config?.webVitals);\n    \n    // Navigate to the initial URL\n    await page.goto(scenario.url, { waitUntil: 'networkidle' });\n    \n    // Load web-vitals package if needed (after navigation, before steps)\n    if (config?.webVitals?.fallbackToPackage && !config?.webVitals?.usePerformanceObserver) {\n      await loadWebVitalsPackage(page);\n    }\n    let profileResponse = null;\n    if (config?.enableProfile) {\n      profileResponse = await profileJs(page, () => runProfile(page, scenario));\n    } else {\n      await runProfile(page, scenario);\n    }\n\n    \n    // Wait a bit for any final interactions to settle\n    await page.waitForTimeout(2000);\n    const webVitals = await collectVitals(page);\n    \n    // const webVitals = await webVitalsPromise;\n    const performance = await measurePerformanceMetrics(page);\n    const network = await measureNetworkRequests(page);\n\n    // Generate report\n    const report: WebVitalsReport = {\n      scenario: scenario.name,\n      url: scenario.url,\n      timestamp: new Date().toISOString(),\n      metrics: webVitals,\n      performance,\n      network,\n      profile: profileResponse?.profile || null,\n    };\n    \n    return report;\n    \n  } finally {\n    await page.close();\n  }\n}\n","import type { WebVitalsReport, GuardianConfig } from '../types';\n\n/**\n * Checks if Web Vitals metrics violate performance budgets\n * @param report - Web Vitals report to check\n * @param budgets - Performance budgets to validate against\n * @returns Array of budget violation messages\n */\nexport function checkBudgetViolations(report: WebVitalsReport, budgets: GuardianConfig['budgets']): string[] {\n  const violations: string[] = [];\n  \n  if (!budgets) return violations;\n  \n  const { metrics } = report;\n  \n  if (budgets.FCP && metrics.FCP && metrics.FCP > budgets.FCP) {\n    violations.push(`FCP: ${metrics.FCP}ms > ${budgets.FCP}ms`);\n  }\n  \n  if (budgets.LCP && metrics.LCP && metrics.LCP > budgets.LCP) {\n    violations.push(`LCP: ${metrics.LCP}ms > ${budgets.LCP}ms`);\n  }\n  \n  if (budgets.FID && metrics.FID && metrics.FID > budgets.FID) {\n    violations.push(`FID: ${metrics.FID}ms > ${budgets.FID}ms`);\n  }\n  \n  if (budgets.CLS && metrics.CLS && metrics.CLS > budgets.CLS) {\n    violations.push(`CLS: ${metrics.CLS} > ${budgets.CLS}`);\n  }\n  \n  if (budgets.INP && metrics.INP && metrics.INP > budgets.INP) {\n    violations.push(`INP: ${metrics.INP}ms > ${budgets.INP}ms`);\n  }\n  \n  if (budgets.TTFB && metrics.TTFB && metrics.TTFB > budgets.TTFB) {\n    violations.push(`TTFB: ${metrics.TTFB}ms > ${budgets.TTFB}ms`);\n  }\n  \n  return violations;\n}\n","import { chromium } from 'playwright';\nimport type { GuardianConfig, GuardianResult } from '../types';\nimport { findScenarioFiles, loadScenarioFile } from '../utils/fileUtils';\nimport { runScenario } from '../scenarios/runner';\nimport { checkBudgetViolations } from './budgetChecker';\nimport { generateHTMLReport } from '../utils/reportGenerator';\n\n/**\n * Main function that runs all scenarios and generates Web Vitals reports\n * @param config - Guardian configuration\n * @returns Promise resolving to execution results and summary\n */\nexport async function runWebVitalsGuardian(config: GuardianConfig): Promise<GuardianResult> {\n  const browser = await chromium.launch({ \n    headless: config.headless !== false \n  });\n  \n  try {\n    // Find all scenario files\n    const scenarioFiles = findScenarioFiles(config.scenariosPath);\n    \n    if (scenarioFiles.length === 0) {\n      throw new Error(`No *.scenario.json files found in ${config.scenariosPath}`);\n    }\n    \n    console.log(`Found ${scenarioFiles.length} scenario files`);\n    \n    const reports: GuardianResult['reports'] = [];\n    const budgetViolations: string[] = [];\n    \n    // Run each scenario\n    for (const filePath of scenarioFiles) {\n      try {\n        console.log(`Running scenario: ${filePath}`);\n        const scenario = loadScenarioFile(filePath, config.variables);\n        const report = await runScenario(browser, scenario, config);\n        reports.push(report);\n        \n        // Check against budgets\n        const budgets = { ...config.budgets, ...scenario.webVitals?.budgets };\n        const violations = checkBudgetViolations(report, budgets);\n        if (violations.length > 0) {\n          budgetViolations.push(`${scenario.name}: ${violations.join(', ')}`);\n        }\n        \n        console.log(`✓ Completed: ${scenario.name}`);\n      } catch (error) {\n        console.error(`✗ Failed to run scenario ${filePath}:`, error);\n        // Continue with other scenarios\n      }\n    }\n    \n    const summary: GuardianResult['summary'] = {\n      totalScenarios: scenarioFiles.length,\n      passed: reports.length,\n      failed: scenarioFiles.length - reports.length,\n      budgetViolations\n    };\n    \n    const result = { reports, summary };\n    \n    // Generate HTML report if requested\n    if (config.generateHTMLReport) {\n      const htmlReportPath = config.htmlReportPath || \n        (config.outputPath ? `${config.outputPath}/web-vitals-report.html` : 'web-vitals-report.html');\n      generateHTMLReport(result, htmlReportPath);\n    }\n    \n    return result;\n    \n  } finally {\n    await browser.close();\n  }\n}\n"],"names":["performance","initScript","results"],"mappings":"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"}